{
  "version": 3,
  "file": "C:/Users/Tine/Tine/Studium/Thesis/Code/public/js/lib/multi.js",
  "sources": [
    "events.js",
    "util.js",
    "../lib/watch.js",
    "../shared/SyncedObject.js",
    "../shared/CustomMessageSender.js",
    "player.js",
    "../shared/pubSub.js",
    "messages.js",
    "session.js",
    "../shared/color.js",
    "../shared/errors.js",
    "../lib/q.js",
    "multi.js"
  ],
  "names": [],
  "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzDA,AD0DA;ACzpbjLA,ADkLA;ACjrgVA;AC/UA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvHA,ADwHA;ACvh
  "sourcesContent": [
    "\n/**\n* Simple wrapper, so you can require('events') on client side\n* without using browserify.\n* @module client/events\n*/\n\ndefine('events',['require','exports','module','socket.io'],function(require, exports, module) {\n\n\t/**\n\t * @classdesc EventEmitter from from socket.io\n\t * @mixin\n\t * @class\n\t * @see {@link https://github.com/LearnBoost/socket.io-client/blob/master/lib/emitter.js}\n\t */\n\texports.EventEmitter = require('socket.io').EventEmitter;\n\n});",
    "\n/**\r\n* Collection of util functions and required polyfills.\r\n* @module client/util\r\n*/\r\n\r\ndefine('util',['require','exports','module','socket.io'],function(require, exports, module) {\r\n\r\n\t/**\r\n\t* Inherit the prototype methods from one constructor into another.\r\n\t* <br/><br/>\r\n\t* From the socket.io util package. See {@link https://github.com/LearnBoost/socket.io-client}\r\n\t*\r\n\t* @param {function} ctor Constructor function which needs to inherit the\r\n\t* prototype.\r\n\t* @param {function} superCtor Constructor function to inherit prototype from.\r\n\t* @example\r\n\t* var ChildClass = function () {\r\n\t*   SuperClass.apply(this, arguments);\r\n\t*   this.name = 'childClass';\r\n\t* };\r\n\t* util.inherits(ChildClass, SuperClass);\r\n\t*/\r\n\texports.inherits = require('socket.io').util.inherit;\r\n\r\n\r\n\t/* Function.bind-polyfill from \r\n\t* https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Compatibility\r\n\t* This is needed to support older browsers without proper\r\n\t* ECMAScript 5.1 support. Especially PhantomJS that's running\r\n\t* the tests of this project will throw errors without this\r\n\t* polyfill.\r\n\t* See https://groups.google.com/forum/#!msg/phantomjs/r0hPOmnCUpc/uxusqsl2LNoJ\r\n\t*/\r\n\tif (!Function.prototype.bind) {\r\n\t\tFunction.prototype.bind = function (oThis) {\r\n\t\t\tif (typeof this !== 'function') {\r\n\t\t\t\t// closest thing possible to the ECMAScript 5 internal IsCallable function\r\n\t\t\t\tthrow new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\r\n\t\t\t}\r\n\r\n\t\t\tvar aArgs = Array.prototype.slice.call(arguments, 1);\r\n\t\t\tvar fToBind = this;\r\n\t\t\tvar FNOP = function () {};\r\n\t\t\tvar fBound = function () {\r\n\t\t\t\tvar isValid = this instanceof FNOP && oThis;\r\n\t\t\t\treturn fToBind.apply(isValid ? this : oThis,\r\n\t\t\t\t\taArgs.concat(Array.prototype.slice.call(arguments))\r\n\t\t\t\t);\r\n\t\t\t};\r\n\r\n\t\t\tFNOP.prototype = this.prototype;\r\n\t\t\tfBound.prototype = new FNOP();\r\n\r\n\t\t\treturn fBound;\r\n\t\t};\r\n\t}\r\n\r\n});",
    "\n/**\n * DEVELOPED BY\n * GIL LOPES BUENO\n * gilbueno.mail@gmail.com\n *\n * WORKS WITH:\n * IE 9+, FF 4+, SF 5+, WebKit, CH 7+, OP 12+, BESEN, Rhino 1.7+\n *\n * FORK:\n * https://github.com/melanke/Watch.JS\n */\n\n\"use strict\";\n(function (factory) {\n    if (typeof exports === 'object') {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like enviroments that support module.exports,\n        // like Node.\n        module.exports = factory();\n    } else if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define('../lib/watch',factory);\n    } else {\n        // Browser globals\n        window.WatchJS = factory();\n        window.watch = window.WatchJS.watch;\n        window.unwatch = window.WatchJS.unwatch;\n        window.callWatchers = window.WatchJS.callWatchers;\n    }\n}(function () {\n\n    var WatchJS = {\n        noMore: false\n    },\n    lengthsubjects = [];\n\n    var isFunction = function (functionToCheck) {\n            var getType = {};\n            return functionToCheck && getType.toString.call(functionToCheck) == '[object Function]';\n    };\n\n    var isInt = function (x) {\n        return x % 1 === 0;\n    };\n\n    var isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    var getObjDiff = function(a, b){\n        var aplus = [],\n        bplus = [];\n\n        if(!(typeof a == \"string\") && !(typeof b == \"string\") && !isArray(a) && !isArray(b)){\n\n            for(var i in a){\n                if(b[i] === undefined){\n                    aplus.push(i);\n                }\n            }\n\n            for(var j in b){\n                if(a[j] === undefined){\n                    bplus.push(j);\n                }\n            }\n        }\n\n        return {\n            added: aplus,\n            removed: bplus\n        }\n    };\n\n    var clone = function(obj){\n\n        if (null == obj || \"object\" != typeof obj) {\n            return obj;\n        }\n\n        var copy = obj.constructor();\n\n        for (var attr in obj) {\n            copy[attr] = obj[attr];\n        }\n\n        return copy;\n\n    }\n\n    var defineGetAndSet = function (obj, propName, getter, setter) {\n        try {\n\n            Object.observe(obj[propName], function(data){\n                setter(data); //TODO: adapt our callback data to match Object.observe data spec\n            }); \n\n        } catch(e) {\n\n            try {\n                    Object.defineProperty(obj, propName, {\n                            get: getter,\n                            set: setter,\n                            enumerable: true,\n                            configurable: true\n                    });\n            } catch(e2) {\n                try{\n                    Object.prototype.__defineGetter__.call(obj, propName, getter);\n                    Object.prototype.__defineSetter__.call(obj, propName, setter);\n                } catch(e3) {\n                    throw new Error(\"watchJS error: browser not supported :/\")\n                }\n            }\n\n        }\n    };\n\n    var defineProp = function (obj, propName, value) {\n        try {\n            Object.defineProperty(obj, propName, {\n                enumerable: false,\n                configurable: true,\n                writable: false,\n                value: value\n            });\n        } catch(error) {\n            obj[propName] = value;\n        }\n    };\n\n    var watch = function () {\n\n        if (isFunction(arguments[1])) {\n            watchAll.apply(this, arguments);\n        } else if (isArray(arguments[1])) {\n            watchMany.apply(this, arguments);\n        } else {\n            watchOne.apply(this, arguments);\n        }\n\n    };\n\n\n    var watchAll = function (obj, watcher, level, addNRemove) {\n\n        if ((typeof obj == \"string\") || (!(obj instanceof Object) && !isArray(obj))) { //accepts only objects and array (not string)\n            return;\n        }\n\n        var props = [];\n\n\n        if(isArray(obj)) {\n            for (var prop = 0; prop < obj.length; prop++) { //for each item if obj is an array\n                props.push(prop); //put in the props\n            }\n        } else {\n            for (var prop2 in obj) { //for each attribute if obj is an object\n                props.push(prop2); //put in the props\n            }\n        }\n\n        watchMany(obj, props, watcher, level, addNRemove); //watch all itens of the props\n\n        if (addNRemove) {\n            pushToLengthSubjects(obj, \"$$watchlengthsubjectroot\", watcher, level);\n        }\n    };\n\n\n    var watchMany = function (obj, props, watcher, level, addNRemove) {\n\n        if ((typeof obj == \"string\") || (!(obj instanceof Object) && !isArray(obj))) { //accepts only objects and array (not string)\n            return;\n        }\n\n        for (var prop in props) { //watch each attribute of \"props\" if is an object\n            watchOne(obj, props[prop], watcher, level, addNRemove);\n        }\n\n    };\n\n    var watchOne = function (obj, prop, watcher, level, addNRemove) {\n\n        if ((typeof obj == \"string\") || (!(obj instanceof Object) && !isArray(obj))) { //accepts only objects and array (not string)\n            return;\n        }\n\n        if(isFunction(obj[prop])) { //dont watch if it is a function\n            return;\n        }\n\n        if(obj[prop] != null && (level === undefined || level > 0)){\n            if(level !== undefined){\n                level--;\n            }\n            watchAll(obj[prop], watcher, level); //recursively watch all attributes of this\n        }\n\n        defineWatcher(obj, prop, watcher);\n\n        if(addNRemove){\n            pushToLengthSubjects(obj, prop, watcher, level);\n        }\n\n    };\n\n    var unwatch = function () {\n\n        if (isFunction(arguments[1])) {\n            unwatchAll.apply(this, arguments);\n        } else if (isArray(arguments[1])) {\n            unwatchMany.apply(this, arguments);\n        } else {\n            unwatchOne.apply(this, arguments);\n        }\n\n    };\n\n    var unwatchAll = function (obj, watcher) {\n\n        if (obj instanceof String || (!(obj instanceof Object) && !isArray(obj))) { //accepts only objects and array (not string)\n            return;\n        }\n\n        var props = [];\n\n\n        if (isArray(obj)) {\n            for (var prop = 0; prop < obj.length; prop++) { //for each item if obj is an array\n                props.push(prop); //put in the props\n            }\n        } else {\n            for (var prop2 in obj) { //for each attribute if obj is an object\n                props.push(prop2); //put in the props\n            }\n        }\n\n        unwatchMany(obj, props, watcher); //watch all itens of the props\n    };\n\n\n    var unwatchMany = function (obj, props, watcher) {\n\n        for (var prop2 in props) { //watch each attribute of \"props\" if is an object\n            unwatchOne(obj, props[prop2], watcher);\n        }\n    };\n\n    var defineWatcher = function (obj, prop, watcher) {\n\n        var val = obj[prop];\n\n        watchFunctions(obj, prop);\n\n        if (!obj.watchers) {\n            defineProp(obj, \"watchers\", {});\n        }\n\n        if (!obj.watchers[prop]) {\n            obj.watchers[prop] = [];\n        }\n\n        for(var i in obj.watchers[prop]){\n            if(obj.watchers[prop][i] === watcher){\n                return;\n            }\n        }\n\n\n        obj.watchers[prop].push(watcher); //add the new watcher in the watchers array\n\n\n        var getter = function () {\n            return val;\n        };\n\n\n        var setter = function (newval) {\n            var oldval = val;\n            val = newval;\n\n            if (obj[prop]){\n                watchAll(obj[prop], watcher);\n            }\n\n            watchFunctions(obj, prop);\n\n            if (!WatchJS.noMore){\n                if (JSON.stringify(oldval) !== JSON.stringify(newval)) {\n                    callWatchers(obj, prop, \"set\", newval, oldval);\n                    WatchJS.noMore = false;\n                }\n            }\n        };\n\n        defineGetAndSet(obj, prop, getter, setter);\n\n    };\n\n    var callWatchers = function (obj, prop, action, newval, oldval) {\n        if (prop) {\n            for (var wr in obj.watchers[prop]) {\n                if (isInt(wr)) {\n                    obj.watchers[prop][wr].call(obj, prop, action, newval || obj[prop], oldval);\n                }\n            }\n        } else {\n            for (var prop in obj) {//call all\n                callWatchers(obj, prop, action, newval, oldval);\n            }\n        }\n    };\n\n    // @todo code related to \"watchFunctions\" is certainly buggy\n    var methodNames = ['pop', 'push', 'reverse', 'shift', 'sort', 'slice', 'unshift'];\n    var defineArrayMethodWatcher = function (obj, prop, original, methodName) {\n        defineProp(obj[prop], methodName, function () {\n            var response = original.apply(obj[prop], arguments);\n            watchOne(obj, obj[prop]);\n            if (methodName !== 'slice') {\n                callWatchers(obj, prop, methodName,arguments);\n            }\n            return response;\n        });\n    };\n\n    var watchFunctions = function(obj, prop) {\n\n        if ((!obj[prop]) || (obj[prop] instanceof String) || (!isArray(obj[prop]))) {\n            return;\n        }\n\n        for (var i = methodNames.length, methodName; i--;) {\n            methodName = methodNames[i];\n            defineArrayMethodWatcher(obj, prop, obj[prop][methodName], methodName);\n        }\n\n    };\n\n    var unwatchOne = function (obj, prop, watcher) {\n        for(var i in obj.watchers[prop]){\n            var w = obj.watchers[prop][i];\n\n            if(w == watcher) {\n                obj.watchers[prop].splice(i, 1);\n            }\n        }\n\n        removeFromLengthSubjects(obj, prop, watcher);\n    };\n\n    var loop = function(){\n\n        for(var i in lengthsubjects){\n\n            var subj = lengthsubjects[i];\n\n            if (subj.prop === \"$$watchlengthsubjectroot\") {\n\n                var difference = getObjDiff(subj.obj, subj.actual);\n\n                if(difference.added.length || difference.removed.length){\n                    if(difference.added.length){\n                        watchMany(subj.obj, difference.added, subj.watcher, subj.level - 1, true);\n                    }\n\n                    subj.watcher.call(subj.obj, \"root\", \"differentattr\", difference, subj.actual);\n                }\n                subj.actual = clone(subj.obj);\n\n\n            } else {\n\n                var difference = getObjDiff(subj.obj[subj.prop], subj.actual);\n            \n                if(difference.added.length || difference.removed.length){\n                    if(difference.added.length){\n                        for(var j in subj.obj.watchers[subj.prop]){\n                            watchMany(subj.obj[subj.prop], difference.added, subj.obj.watchers[subj.prop][j], subj.level - 1, true);\n                        }\n                    }\n\n                    callWatchers(subj.obj, subj.prop, \"differentattr\", difference, subj.actual);\n                }\n\n                subj.actual = clone(subj.obj[subj.prop]);\n\n            }\n\n        }\n\n    };\n\n    var pushToLengthSubjects = function(obj, prop, watcher, level){\n        \n        var actual;\n\n        if (prop === \"$$watchlengthsubjectroot\") {\n            actual =  clone(obj);\n        } else {\n            actual = clone(obj[prop]);\n        }\n\n        lengthsubjects.push({\n            obj: obj,\n            prop: prop,\n            actual: actual,\n            watcher: watcher,\n            level: level\n        });\n    };\n\n    var removeFromLengthSubjects = function(obj, prop, watcher){\n\n        for (var i in lengthsubjects) {\n            var subj = lengthsubjects[i];\n\n            if (subj.obj == obj && subj.prop == prop && subj.watcher == watcher) {\n                lengthsubjects.splice(i, 1);\n            }\n        }\n\n    };\n\n    setInterval(loop, 50);\n\n    WatchJS.watch = watch;\n    WatchJS.unwatch = unwatch;\n    WatchJS.callWatchers = callWatchers;\n\n    return WatchJS;\n\n}));\n",
    "\n/* \n* To use this with require.js AND the node.js module system (on server and client side).\n* see https://github.com/jrburke/amdefine\n*/\nif (typeof define !== 'function') { var define = require('amdefine')(module); }\n\n\ndefine('../shared/SyncedObject',['require','exports','module','../lib/watch','events','util'],function(require, exports, module) {\n\n\tvar WatchJS = require('../lib/watch');\n\tvar EventEmitter = require('events').EventEmitter;\n\tvar util = require('util');\n\n\t/**\n\t * @typedef Changeset\n\t * This object describes changes made to the attributes inside the wrapped\n\t * object.\n\t * @memberOf SyncedObject\n\t * @property {Object.<string, *>} changed  any changed top level attributes:\n\t * their new value mapped to their name\n\t * @property {Array.<string>} removed  names of all top level\n\t * attributes that have been deleted\n\t */\n\n\t/**\n\t * @classdesc This class wraps an object and detects when it is changed from\n\t * the outside world.\n\t * @example\n\t * var synced = new SyncedObject();\n\t * synced.on('changed', function (changeset) {\n\t *   console.log(changeset.changed); // { 'foo': 'bar' }\n\t * });\n\t * synced.data.foo = 'bar';\n\t * @class SyncedObject\n\t * @mixes external:EventEmitter\n\t */\n\tvar SyncedObject = function () {\n\n\t\tEventEmitter.call(this);\n\t\tthis._data = {};\n\t\tthis.onAttributesChange = this.onAttributesChange.bind(this);\n\t};\n\n\tutil.inherits(SyncedObject, EventEmitter);\n\n\t/**\n\t * The wrapped data object. Changes to it's top level attributes are\n\t * detected and a {@link SyncedObject#event:changed changed} event is\n\t * fired in this case.\n\t * @type {Object}\n\t * @name data\n\t * @instance\n\t * @memberOf SyncedObject\n\t */\n\tObject.defineProperty(SyncedObject.prototype, 'data', {\n\t\tget: function() {\n\t\t\treturn this._data;\n\t\t},\n\t\tset: function(val) {\n\t\t\tif (typeof val === 'object') {\n\t\t\t\t// remove\n\t\t\t\tfor (var j in this._data) {\n\t\t\t\t\tif (!val.propertyIsEnumerable(j)) {\n\t\t\t\t\t\tdelete this._data[j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// add\n\t\t\t\tfor (var i in val) {\n\t\t\t\t\tthis._data[i] = val[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * Starts detecting changes to the wrapped object.\n\t * @memberOf SyncedObject\n\t */\n\tSyncedObject.prototype.startWatching = function () {\n\t\tWatchJS.watch(this._data, this.onAttributesChange, 0, true);\n\t};\n\n\t/**\n\t * Stops detecting changes to the wrapped object. You can resume watching\n\t * @memberOf SyncedObject\n\t * again any time.\n\t */\n\tSyncedObject.prototype.stopWatching = function () {\n\t\tWatchJS.unwatch(this._data, this.onAttributesChange);\n\t};\n\n\t/**\n\t * Applies the given changeset to the wrapped object without fireing \n\t * a {@link SyncedObject#event:changed changed} event.\n\t * @param  {SyncedObject.Changeset} changeset  changes that should be\n\t *  applied to the wrapped object\n\t * @memberOf SyncedObject\n\t */\n\tSyncedObject.prototype.applyChangesetSilently = function (changeset) {\n\t\tthis.stopWatching();\n\t\tthis.applyChangeset(changeset);\n\t\tthis.startWatching();\n\t};\n\n\t/**\n\t * Applies the given changeset to the wrapped object. Note that this\n\t * method fires a {@link SyncedObject#event:changed changed} event if any \n\t * attribute does change. If you don't want to receive this event, use \n\t * {@link SyncedObject#applyChangesetSilently applyChangesetSilently} \n\t * instead.\n\t * @fires  SyncedObject#changed\n\t * @param  {SyncedObject.Changeset} changeset  changes that should be\n\t *  applied to the wrapped object\n\t * @memberOf SyncedObject\n\t */\n\tSyncedObject.prototype.applyChangeset = function (changeset) {\n\t\tvar propertyName;\n\t\tif (changeset.hasOwnProperty('changed')) {\n\t\t\tfor (propertyName in changeset.changed) {\n\t\t\t\tthis._data[propertyName] = changeset.changed[propertyName];\n\t\t\t}\n\t\t}\n\t\tif (changeset.hasOwnProperty('removed')) {\n\t\t\tfor (var i in changeset.removed) {\n\t\t\t\tpropertyName = changeset.removed[i];\n\t\t\t\tdelete this._data[propertyName];\n\t\t\t}\n\t\t}\n\t};\n\n\t/** \n\t * @param {string} property  property that has been changed\n\t * @param {string} action    what has been done to the property\n\t * @param          newValue  new value of the changed property\n\t * @param          oldValue  old value of the changed property\n\t * @see                      https://github.com/melanke/Watch.JS\n\t * @private\n\t */\n\tSyncedObject.prototype.onAttributesChange = function (property, action, newValue, oldValue) {\n\t\tvar changed = {};\n\t\tvar removed = [];\n\n\t\tif (property === 'root' && action === 'differentattr') {\n\t\t\t// some attributes have been added or deleted\n\t\t\tfor (var i in newValue.added) {\n\t\t\t\tvar propertyName = newValue.added[i];\n\t\t\t\tchanged[propertyName] = this._data[propertyName];\n\t\t\t}\n\t\t\tfor (var j in newValue.removed) {\n\t\t\t\tremoved.push(newValue.removed[j]);\n\t\t\t}\n\t\t} else if (action === 'set' &&\n\t\t\t\tJSON.stringify(oldValue) !== JSON.stringify(newValue)) {\n\t\t\t// one attribute has changed\n\t\t\tchanged[property] = newValue;\n\t\t}\n\n\t\tvar changeset = {};\n\t\tif (Object.keys(changed).length > 0) {\n\t\t\tchangeset.changed = changed;\n\t\t}\n\t\tif (Object.keys(removed).length > 0) {\n\t\t\tchangeset.removed = removed;\n\t\t}\n\n\t\tthis.emit('changed', changeset);\n\t};\n\n\t/**\n\t * Fired when any top level attribute of the wrapped object has changed.\n\t * @event SyncedObject#changed\n\t * @property {SyncedObject.Changeset} changeset  what has changed exactly?\n\t */\n\n\texports = SyncedObject;\n\treturn exports;\n\n});",
    "\n/* \n* To use this with require.js AND the node.js module system (on server and client side).\n* see https://github.com/jrburke/amdefine\n*/\nif (typeof define !== 'function') { var define = require('amdefine')(module); }\n\n\ndefine('../shared/CustomMessageSender',['require','exports','module'],function(require, exports, module) {\n\n\t/**\n\t * @classdesc Util class for all objects that allow to send custom messages\n\t *  (e.g. player.message('foo', {data: 'bar'})).\n\t * @param {module:server/messages~MessageBus|module:client/messages~MessageBus} \n\t *  messageBus message bus instance used for sending the messages\n\t * @param {string} instance   instance identifier that should be used for\n\t *  the 'fromInstance' attribute of outgoing messages\n\t * @private\n\t */\n\tvar CustomMessageSender = function (messageBus, instance) {\n\t\tthis.messageBus = messageBus;\n\t\tthis.instance = instance;\n\t};\n\n\t/**\n\t * Sends a custom message over the message bus.\n\t * @param  {string} type     name of the custom message\n\t * @param  {*}      [data]   any data to transport\n\t * @param  {module:client/multi~toClient|module:server/multi~toClient} \n\t *  [toClient='all'] which client should receive the message\n\t * @param  {boolean} [volatile=false] if true, the message may be dropped\n\t *  by the framework\n\t */\n\tCustomMessageSender.prototype.message = function (type, data, toClient, volatile) {\n\t\tvar message = {\n\t\t\tname: 'message',\n\t\t\tfromInstance: this.instance,\n\t\t\ttype: type,\n\t\t\tdata: data\n\t\t};\n\n\t\tmessage.toClient = toClient || 'all';\n\t\tif (typeof message.toClient === 'object') {\n\t\t\tif (message.toClient instanceof Array) {\n\t\t\t\tfor (var i in message.toClient) {\n\t\t\t\t\tmessage.toClient[i] = message.toClient[i].id;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmessage.toClient = [ message.toClient.id ];\n\t\t\t}\n\t\t}\n\n\t\tif (volatile === true) {\n\t\t\tmessage.volatile = true;\n\t\t}\n\n\t\tthis.messageBus.send(message);\n\t};\n\n\t\n\texports = CustomMessageSender;\n\treturn exports;\n\n});",
    "\n/**\r\n * @module client/player\r\n * @private\r\n */\r\n \r\ndefine('player',['require','exports','module','events','util','../shared/SyncedObject','../shared/CustomMessageSender'],function(require, exports, module) {\r\n\r\n\tvar EventEmitter = require('events').EventEmitter;\r\n\tvar util = require('util');\r\n\tvar SyncedObject = require('../shared/SyncedObject');\r\n\tvar MessageSender = require('../shared/CustomMessageSender');\r\n\r\n\t/**\r\n\t* @classdesc This player class represents a device connected\r\n\t* to a session. Every player is mirrored from its original instance \r\n\t* on the server side.\r\n\t* \r\n\t* @inner\r\n\t* @class\r\n\t* @protected\r\n\t* @mixes module:client/events.EventEmitter\r\n\t* @memberof module:client/player\r\n\t* @fires module:client/player~Player#attributesChanged\r\n\t* @fires module:client/player~Player#disconnected\r\n\t*\r\n\t* @param messageBus ........\r\n\t*/\r\n\tvar Player = function (id, messageBus) {\r\n\r\n\t\tEventEmitter.call(this);\r\n\r\n\t\t/**\r\n\t\t * wrapper for this players attributes\r\n\t\t * @type {SyncedObject}\r\n\t\t * @private\r\n\t\t */\r\n\t\tthis.syncedAttributes = new SyncedObject();\r\n\r\n\t\tthis.messageBus = messageBus;\r\n\r\n\t\tthis.messageSender = new MessageSender(messageBus, id);\r\n\t\t/** \r\n\t\t * unique id for this player\r\n\t\t * @type {string}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tthis.id = id;\r\n\t\t/**\r\n\t\t * Role that is fulfilled by this\r\n\t\t * player. Either 'presenter' or 'player'.\r\n\t\t * @type {string}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tthis.role = 'player';\r\n\t\t/** \r\n\t\t * Object with user attributes for this player.\r\n\t\t * All changes within this object will automatically\r\n\t\t * be synced to the server side and all other clients. \r\n\t\t * Make sure not to override the hole object but only \r\n\t\t * its attributes.\r\n\t\t * <br>\r\n\t\t * Listen for changes by subscribing to the\r\n\t\t * {@link module:client/player~Player#attributesChanged attributesChanged}\r\n\t\t * event.\r\n\t\t * @type {object}\r\n\t\t */\r\n\t\tthis.attributes = this.syncedAttributes.data;\r\n\t\t/**\r\n\t\t * Unique player-number inside this session beginning with 0.\r\n\t\t * Free numbers from disconnected players will be reused to\r\n\t\t * avoid gaps.\r\n\t\t * @type {integer}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tthis.number = null;\r\n\t\t/**\r\n\t\t * pixel width of this clients screen\r\n\t\t * @type {integer}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tthis.width = null;\r\n\t\t/**\r\n\t\t * pixel height of this clients screen\r\n\t\t * @type {integer}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tthis.height = null;\r\n\r\n\t\t// listeners\r\n\t\tthis.messageRegister = this.messageBus.register('message',\r\n\t\t\tthis.id, this.onPlayerMessage.bind(this));\r\n\t\tthis.attributeRegister = this.messageBus.register('attributesChanged',\r\n\t\t\tthis.id, this.onAttributesChangedOnServer.bind(this));\r\n\t\tthis.leftRegister = this.messageBus.register('disconnected',\r\n\t\t\tthis.id, this.onDisconnected.bind(this));\r\n\t\tthis.syncedAttributes.on('changed', this.onAttributesChanged.bind(this));\r\n\t\tthis.syncedAttributes.startWatching();\r\n\t};\r\n\r\n\tutil.inherits(Player, EventEmitter);\r\n\r\n\t/**\r\n\t * Called when any player left its session.\r\n\t * @private\r\n\t */\r\n\tPlayer.prototype.onDisconnected = function (message) {\r\n\t\t// I do not longer exist - inform...\r\n\t\tthis.emit('disconnected');\r\n\t\t// ... and remove listeners\r\n\t\tthis.removeAllListeners();\r\n\t\tthis.messageBus.unregister(this.messageRegister);\r\n\t\tthis.messageBus.unregister(this.attributeRegister);\r\n\t\tthis.messageBus.unregister(this.leftRegister);\r\n\t\tthis.syncedAttributes.stopWatching();\r\n\t};\r\n\r\n\t/**\r\n\t * Called when this socket receives a message for any player.\r\n\t * @private\r\n\t */\r\n\tPlayer.prototype.onPlayerMessage = function (message) {\r\n\t\tthis.emit(message.type, { type: message.type, data: message.data } );\r\n\t};\r\n\r\n\t/**\r\n\t * Called when attributes for any player have been changed\r\n\t * on server side.\r\n\t * @private\r\n\t */\r\n\tPlayer.prototype.onAttributesChangedOnServer = function (message) {\r\n\t\tthis.syncedAttributes.applyChangesetSilently(message.changeset);\r\n\t\tif (message.changeset.hasOwnProperty('changed')) {\r\n\t\t\tfor (var i in message.changeset.changed) {\r\n\t\t\t\tthis.emit('attributeChanged/' + i, this.attributes[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/** \r\n\t * Called when the user attributes have been changed.\r\n\t * @param {SyncedObject.Changeset} changeset\r\n\t * @private\r\n\t */\r\n\tPlayer.prototype.onAttributesChanged = function (changeset) {\r\n\t\tthis.messageBus.send({\r\n\t\t\tname: 'attributesChanged',\r\n\t\t\tfromInstance: this.id,\r\n\t\t\tchangeset: changeset\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Sends the given message to all other instances of this player.\r\n\t * @param {string} type    type of message that should be send\r\n\t * @param {object} [data]  message data that should be send\t\r\n\t * @param {module:client/multi~toClient} [toClient='all']   which client\r\n\t *  should receive this message\r\n\t * @param {boolean} [volatile=false]  if true, the message may be dropped\r\n\t *  by the framework. Use this option for real time data where one dropped\r\n\t *  message does not interrupt your application.\r\n\t * @example\r\n\t * // on client no 1\r\n\t * player.on('ping', function (event) {\r\n\t *   // outputs 'bar'\r\n\t *   console.log(event.data.foo);\r\n\t * });\r\n\t * // on client no 2, instance of same player\r\n\t * player.message('ping', { foo: 'bar' });\r\n\t */\r\n\tPlayer.prototype.message = function (type, data, toClient, volatile) {\r\n\t\tthis.messageSender.message(type, data, toClient, volatile);\r\n\t};\r\n\r\n\r\n\t/**\r\n\t * Fired when the {@link module:client/player~Player#attributes attributes} of \r\n\t * this player have been changed by this client, another client or \r\n\t * the server.\r\n\t * @event module:client/player~Player#attributesChanged\r\n\t * @property {string} key    name of the changed attribute\r\n\t * @property {*}      value  new value of the changed attribute\r\n\t * @todo this is currently dispatched only when changed from outside\r\n\t */\r\n\r\n\t/**\r\n\t * Fired when this player disconnects from the server. Don't use this\r\n\t * instance any longer after this event has been fired.\r\n\t * @event module:client/player~Player#disconnected\r\n\t */\r\n\r\n\r\n\t/**\r\n\t * Compare function to sort an array of players by \r\n\t * {@link module:client/player~Player#number player numbers}.\r\n\t * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\r\n\t */\r\n\texports.compare = function (p1, p2) {\r\n\t\treturn p1.number - p2.number;\r\n\t};\r\n\r\n\t/**\r\n\t* Unpacks a player object send over a socket connection.\r\n\t* @returns {module:client/player~Player}\r\n\t*/\r\n\texports.fromPackedData = function (data, messageBus) {\r\n\t\tvar player = new Player(data.id, messageBus);\r\n\t\tfor (var i in data) {\r\n\t\t\tif (i === 'attributes') {\r\n\t\t\t\tfor (var j in data[i]) {\r\n\t\t\t\t\tplayer.attributes[j] = data[i][j];\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tplayer[i] = data[i];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn player;\r\n\t};\r\n\r\n\treturn exports;\r\n\r\n});",
    "\n/* \n* To use this with require.js AND the node.js module system (on server and client side).\n* see https://github.com/jrburke/amdefine\n*/\nif (typeof define !== 'function') { var define = require('amdefine')(module); }\n\n\ndefine('../shared/pubSub',['require','exports','module'],function(require, exports, module) {\n\n\t/**\n\t * @classdesc A simple implementation of the content based\n\t * Publish/Suscribe-Pattern as described at\n\t * {@link http://msdn.microsoft.com/en-us/library/ff649664.aspx}.\n\t * @class PubSub\n\t * @private\n\t * @example\n\t * var pubSub = new PubSub();\n\t *\n\t * var myCallback = function (message) {\n\t *   // this will be called, for any message that\n\t *   // is approved by our filter function\n\t *   console.log(message);\n\t * };\n\t * \n\t * pubSub.subscribe(myCallback, function (message) {\n\t *   // filter function returning true or false\n\t *   return message.topic === 'test' && message.sender === 42;\n\t * });\n\t *\n\t * pubSub.publish({ topic: 'test', sender: 42 }); // myCallback is called\n\t * pubSub.publish({ topic: 'test', sender: 0 });  // myCallback is not called\n\t */\n\tvar PubSub = function () {\n\t\tthis.listeners = [];\n\t};\n\n\t/**\n\t * Adds a callback funtion that is called for any message published\n\t * to this pubSub-instance that is approved by the given filter function.\n\t * @param  {function} callback  this will be called for any published message\n\t *  that matches the filter function. The massage will be passed as argument.\n\t * @param  {function} filter    a filter function acception any message as\n\t *  argument and returning true, when the message should be accepted and\n\t *  false otherwise.\n\t * @return  a token that can be used to unsubscribe this callback-filter-combo\n\t * @memberOf PubSub\n\t */\n\tPubSub.prototype.subscribe = function (callback, filter) {\n\t\tif (typeof callback !== 'function' || typeof filter !== 'function') {\n\t\t\tthrow 'callback and filter have to be a function';\n\t\t}\n\t\tvar token = function (message) {\n\t\t\tif (filter(message)) {\n\t\t\t\tcallback(message);\n\t\t\t}\n\t\t};\n\t\tthis.listeners.push(token);\n\t\treturn token;\n\t};\n\n\t/**\n\t * Removes a callback-filter-combo so they don't receive published messages\n\t * any longer.\n\t * @param  token  the token to identify the subscription that should\n\t *  be removed - returned by the subscribe method\t\n\t * @memberOf PubSub\n\t * @example\n\t * var pubSub = new PubSub();\n\t *\n\t * // subscribe\n\t * var token = pubSub.subscribe(myCallback, function (message) {\n\t *   return message.receiver === 'xyz';\n\t * });\n\t * \n\t * // unsubscribe\n\t * pubSub.unsubscribe(token);\n\t */\n\tPubSub.prototype.unsubscribe = function (token) {\n\t\tvar index = this.listeners.indexOf(token);\n\t\tif (index !== -1) {\n\t\t\tthis.listeners.splice(index, 1);\n\t\t}\n\t};\n\n\t/**\n\t * Publishes a message in any format to all interested\n\t * subscribers.\n\t * @param  {*} message\n\t * @memberOf PubSub\n\t */\n\tPubSub.prototype.publish = function (message) {\n\t\tvar listeners = this.listeners;\n\t\tfor (var i in listeners) {\n\t\t\tlisteners[i](message);\n\t\t}\n\t};\n\n\t/**\n\t * Removes all subscriptions on this instance.\n\t * @memberOf PubSub\n\t */\n\tPubSub.prototype.unsubscribeAll = function () {\n\t\tthis.listeners = [];\n\t};\n\n\texports = PubSub;\n\treturn exports;\n\n});",
    "\n/**\r\n * @module client/messages\r\n * @private\r\n */\r\n \r\ndefine('messages',['require','exports','module','../shared/pubSub'],function(require, exports, module) {\r\n\r\n\tvar PubSub = require('../shared/pubSub');\r\n\r\n\t/**\r\n\t * @classdesc Centralized communication infrastructure for one session.\r\n\t * Every session or player can send messages to the outside world\r\n\t * and subscribe to messages, using a custom filter.\r\n\t * @class\r\n\t * @param socket socket.io socket instance that connects the\r\n\t *  using session to the outside world\r\n\t * @private\r\n\t */\r\n\texports.MessageBus = function (socket) {\r\n\t\tvar messageBus = this;\r\n\r\n\t\tthis.socket = socket;\r\n\t\tthis.pubSub = new PubSub();\r\n\r\n\t\tsocket.on('disconnect', function () {\r\n\t\t\tmessageBus.onSocketMessage({\r\n\t\t\t\tname: 'disconnect',\r\n\t\t\t\tfromInstance: 'session'\r\n\t\t\t});\r\n\t\t});\r\n\t\tsocket.on('multi', function (data) {\r\n\t\t\tmessageBus.onSocketMessage(data);\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * The socket send a message - publish it to all subscribers.\r\n\t * @private\r\n\t */\r\n\texports.MessageBus.prototype.onSocketMessage = function (message) {\r\n\t\t// console.log(JSON.stringify(message));\r\n\t\tthis.pubSub.publish(message);\r\n\t};\r\n\r\n\t/**\r\n\t * Sends the given message to the server and the instances of the sender\r\n\t * (fromInstance) on all other clients (including the sending client) by \r\n\t * default. <br><br>\r\n\t * You can set message.toClient to: <br>\r\n\t * <ul>\r\n\t * <li>'all' - default behaviour </li>\r\n\t * <li>'all-but-myself' - message does not return to sending client (broadcast) </li>\r\n\t * <li>['id1', 'id2'] - message will be send to all clients whose IDs are \r\n\t * inside the array </li>\r\n\t * </ul>\r\n\t * Use this option to save bandwidth.<br><br>\r\n\t * Message that have set message.volatile=true may be dropped by the framework.\r\n\t * \r\n\t * @param  {object} message\r\n\t * @example\r\n\t * messageBus.send({\r\n\t *   name: 'myEvent',\r\n\t *   fromInstance: 'playerXYZ',\r\n\t *   toClient: 'all-but-myself',\r\n\t *   data1: 'mydata',\r\n\t *   data2: 42\r\n\t * });\r\n\t */\r\n\texports.MessageBus.prototype.send = function (message) {\r\n\t\tthis.socket.emit('multi', message);\r\n\t};\r\n\r\n\t/**\r\n\t * Register a callback for messages from the outside world.\r\n\t * @param  {string}   messageName  on which message name you would like to register?\r\n\t * @param  {string}   instance     messages from which instance do interest you?\r\n\t * @param  {Function} callback     function to call when a corresponding message\r\n\t *  is received (message name _and_ instance correspond to arguments)\r\n\t * @return {}                      token to unregister this callback again\r\n\t */\r\n\texports.MessageBus.prototype.register = function (messageName, instance, callback) {\r\n\t\treturn this.pubSub.subscribe(callback, function (message) {\r\n\t\t\treturn instance === message.fromInstance && messageName === message.name;\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Unrigister a callback you registered earlier.\r\n\t * @param  {} token  register token returned by 'register' method\r\n\t * @example\r\n\t * // register\r\n\t * token = messageBus.register('myEventName', myId, callback);\r\n\t * // ... do something ...\r\n\t * // unregister again\r\n\t * messageBus.unregister(token);\r\n\t */\r\n\texports.MessageBus.prototype.unregister = function (token) {\r\n\t\tthis.pubSub.unsubscribe(token);\r\n\t};\r\n\r\n\t/**\r\n\t * Unregister all callbacks from this MessageBus instance.\r\n\t */\r\n\texports.MessageBus.prototype.unregisterAll = function () {\r\n\t\tthis.pubSub.unsubscribeAll();\r\n\t};\r\n\r\n\t/**\r\n\t * Destroys the link to the outsie world.\r\n\t */\r\n\texports.MessageBus.prototype.disconnect = function () {\r\n\t\tthis.socket.disconnect();\r\n\t};\r\n\r\n\treturn exports;\r\n\r\n});",
    "\n/**\r\n * @module client/session\r\n * @private\r\n */\r\n\r\ndefine('session',['require','exports','module','events','util','./player','./messages','../shared/CustomMessageSender'],function(require, exports, module) {\r\n\r\n\tvar EventEmitter = require('events').EventEmitter;\r\n\tvar util = require('util');\r\n\tvar playerModule = require('./player');\r\n\tvar MessageBus = require('./messages').MessageBus;\r\n\tvar MessageSender = require('../shared/CustomMessageSender');\r\n\r\n\r\n\t/* \r\n\t* internal module functions\r\n\t*/\r\n\r\n\tfunction getJoinSesionUrl(token) {\r\n\t\tvar url = window.location.host;\r\n\t\tif (window.location.port !== '' && window.location.port !== '80') {\r\n\t\t\turl += ':' + window.location.port;\r\n\t\t}\r\n\t\turl += window.location.pathname + '#' + token;\r\n\t\treturn url;\r\n\t}\r\n\r\n\r\n\t/* \r\n\t* session class functions\r\n\t*/\r\n\r\n\t/**\r\n\t* @classdesc A game session that connects and manages multiple players.\r\n\t* @inner\r\n\t* @class\r\n\t* @protected\r\n\t* @mixes module:client/events.EventEmitter\r\n\t* @memberof module:client/session\r\n\t*\r\n\t* @fires module:client/session~Session#playerJoined\r\n\t* @fires module:client/session~Session#playerLeft\r\n\t* @fires module:client/session~Session#destroyed\r\n\t* @fires module:client/session~Session#belowMinPlayerNeeded\r\n\t* @fires module:client/session~Session#aboveMinPlayerNeeded\r\n\t*\r\n\t* @param {module:client/player~Player} myself  the player instance that \r\n\t* represents my own client.\r\n\t* @param {} messageBus\r\n\t* @param {object} sessionData  data object from the server that\r\n\t* describes this session\r\n\t*/\r\n\tvar Session = function (myself, messageBus, sessionData) {\r\n\r\n\t\tEventEmitter.call(this);\r\n\t\tvar session = this;\r\n\r\n\t\t/**\r\n\t\t * The player instance that represents my own client.\r\n\t\t * @type {module:client/player~Player}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tthis.myself = myself;\r\n\r\n\t\tthis.messageBus = messageBus;\r\n\r\n\t\tthis.messageSender = new MessageSender(messageBus, 'session');\r\n\t\t/**\r\n\t\t * Dictionary of all players except myself currently \r\n\t\t * connected to this session; mapped on their ids.\r\n\t\t * @type {Object.<string, module:client/player~Player>}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tthis.players = {};\r\n\t\t/** \r\n\t\t * unique token identifying this session\r\n\t\t * @type {string}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tthis.token = null;\r\n\t\t/**\r\n\t\t * @see SessionOptions\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tthis.minPlayerNeeded = null;\r\n\t\t/**\r\n\t\t * @see SessionOptions\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tthis.maxPlayerAllowed = null;\r\n\r\n\t\tvar packedPlayers = sessionData.players;\r\n\t\tdelete sessionData.players;\r\n\r\n\t\t// unpack session attributes\r\n\t\tfor (var i in sessionData) {\r\n\t\t\tthis[i] = sessionData[i];\r\n\t\t}\r\n\t\t// unpack players\r\n\t\tfor (i in packedPlayers) {\r\n\t\t\tthis.onPlayerConnected({ playerData: packedPlayers[i] });\r\n\t\t}\r\n\r\n\t\t// calculate attributes\r\n\t\t/**\r\n\t\t * URL you have to visit in order to connect to this session.\r\n\t\t * @type {string}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tthis.joinSessionUrl = getJoinSesionUrl(this.token);\r\n\r\n\t\t// add messages listeners\r\n\t\tthis.messageBus.register('disconnect', 'session', function (message) {\r\n\t\t\tsession.emit('destroyed');\r\n\t\t\tsession.messageBus.unregisterAll();\r\n\t\t\tsession.removeAllListeners();\r\n\t\t});\r\n\t\tthis.messageBus.register('message', 'session', function (message) {\r\n\t\t\tsession.emit(message.type,  { type: message.type, data: message.data });\r\n\t\t});\r\n\t\tthis.messageBus.register('playerJoined', 'session', this.onPlayerConnected.bind(this));\r\n\t};\r\n\r\n\tutil.inherits(Session, EventEmitter);\r\n\tutil.inherits(Session, EventEmitter);\r\n\r\n\t/**\r\n\t * @return {integer} number of currently connected players including myself\r\n\t */\r\n\tSession.prototype.getPlayerCount = function () {\r\n\t\treturn Object.keys(this.players).length + 1;\r\n\t};\r\n\r\n\t/**\r\n\t * Creates a player from the given data and adds it to this session.\r\n\t * @private\r\n\t */\r\n\tSession.prototype.onPlayerConnected = function (message) {\r\n\t\tvar session = this;\r\n\t\tvar player = playerModule.fromPackedData(message.playerData, this.messageBus);\r\n\t\tthis.players[player.id] = player;\r\n\r\n\t\tplayer.on('disconnected', function () {\r\n\t\t\tsession.onPlayerDisconnected(player);\r\n\t\t});\r\n\r\n\t\tsession.emit('playerJoined', { player: player });\r\n\t\tif (session.getPlayerCount() === session.minPlayerNeeded) {\r\n\t\t\tsession.emit('aboveMinPlayerNeeded');\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Removes the given player from this session.\r\n\t * @private\r\n\t */\r\n\tSession.prototype.onPlayerDisconnected = function (player) {\r\n\t\tdelete this.players[player.id];\r\n\t\tthis.emit('playerLeft', { player: player });\r\n\r\n\t\tif (this.getPlayerCount() === (this.minPlayerNeeded-1)) {\r\n\t\t\tthis.emit('belowMinPlayerNeeded');\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @returns {Array.<module:client/player~Player>} an array of all \r\n\t * players currently connected to this session including myself.\r\n\t * The array is sorted by \r\n\t * {@link module:client/player~Player#number player numbers} \r\n\t * from small to high.\r\n\t */\r\n\tSession.prototype.getPlayerArray = function () {\r\n\t\tvar playerArray = [];\r\n\t\tfor(var i in this.players) {\r\n\t\t\tplayerArray.push(this.players[i]);\r\n\t\t}\r\n\t\tplayerArray.push(this.myself);\r\n\t\treturn playerArray.sort(playerModule.compare);\r\n\t};\r\n\r\n\t/**\r\n\t * @returns {module:client/player~Player} the player with the\r\n\t * given {@link module:client/player~Player#number player numbers} \r\n\t * (even if this is myself) or null if no player with this number \r\n\t * exists\r\n\t */\r\n\tSession.prototype.getPlayerByNumber = function (number) {\r\n\t\tfor (var i in this.players) {\r\n\t\t\tvar player = this.players[i];\r\n\t\t\tif (player.number === number) {\r\n\t\t\t\treturn player;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.myself.number === number) {\r\n\t\t\treturn this.myself;\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\t/**\r\n\t * @returns {module:client/player~Player} the player with the\r\n\t * given {@link module:client/player~Player#id id} \r\n\t * (even if this is myself) or null if no player with this id \r\n\t * exists\r\n\t */\r\n\tSession.prototype.getPlayerById = function (id) {\r\n\t\tif (this.players.hasOwnProperty(id)) {\r\n\t\t\treturn this.players[id];\r\n\t\t}\r\n\t\tif (this.myself.id === id) {\r\n\t\t\treturn this.myself;\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\t/**\r\n\t * When you call this new players are not allowed to join this\r\n\t * session any more. Instead their promise will be rejected with a \r\n\t * {@link module:shared/errors.JoiningDisabledError JoiningDisabledError}.\r\n\t */\r\n\tSession.prototype.disablePlayerJoining = function () {\r\n\t\tthis.messageBus.send({\r\n\t\t\tname: 'changePlayerJoining',\r\n\t\t\tfromInstance: 'session',\r\n\t\t\tenablePlayerJoining: false\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * A call to this method will allow new players to join this session\r\n\t * again.\r\n\t */\r\n\tSession.prototype.enablePlayerJoining = function () {\r\n\t\tthis.messageBus.send({\r\n\t\t\tname: 'changePlayerJoining',\r\n\t\t\tfromInstance: 'session',\r\n\t\t\tenablePlayerJoining: true\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Sends the given message to all other instances of this session.\r\n\t * @param {string} type    type of message that should be send\r\n\t * @param {object} [data]  message data that should be send\r\n\t * @param {module:client/multi~toClient} [toClient='all']  which client\r\n\t *  should receive this message\r\n\t * @param {boolean} [volatile=false]  if true, the message may be dropped\r\n\t *  by the framework. Use this option for real time data where one dropped\r\n\t *  message does not interrupt your application.\r\n\t * @example\r\n\t * // on client no 1\r\n\t * session.on('ping', function (event) {\r\n\t *   // outputs 'bar'\r\n\t *   console.log(event.data.foo);\r\n\t * });\r\n\t * // on client no 2, instance of same session\r\n\t * session.message('ping', { foo: 'bar' });\r\n\t */\r\n\tSession.prototype.message = function (type, data, toClient, volatile) {\r\n\t\tthis.messageSender.message(type, data, toClient, volatile);\r\n\t};\r\n\r\n\t/**\r\n\t * Disconnects own player from this session.\r\n\t * This will remove this player from all existing\r\n\t * instances of this session.\r\n\t * @fires module:client/session~Session#destroyed\r\n\t */\r\n\tSession.prototype.disconnectMyself = function () {\r\n\t\tthis.messageBus.disconnect();\r\n\t};\r\n\r\n\r\n\t/**\r\n\t * Fired when this session is no longer valid. <br>\r\n\t * The reason could be a broken connection or the\r\n\t * removal of your own player. <br><br>\r\n\t * Don't use this session any longer after the event \r\n\t * has been fired.\r\n\t * @event module:client/session~Session#destroyed\r\n\t */\r\n\r\n\t/**\r\n\t * Fired when a new player has been added to this session.\r\n\t * From now on you can safely communicate with this player.\r\n\t * @event module:client/session~Session#playerJoined\r\n\t * @property {module:client/player~Player} player  The newly added player.\r\n\t * @example <caption>Adding connected players to the DOM</caption>\r\n\t * session.on('playerJoined', function (event) {\r\n\t *   var playerDiv = $('#player').clone();\r\n\t *   $('#players').append(playerDiv);\r\n\t *   event.player.on('disconnected', function () {\r\n\t *     playerDiv.remove();\r\n\t *   });\r\n\t * }\r\n\t */\r\n\r\n\t/**\r\n\t * Fired when a player has been removed from this session.\r\n\t * @event module:client/session~Session#playerLeft\r\n\t * @property {module:client/player~Player} player  The removed player.\r\n\t */\r\n\r\n\t/**\r\n\t * Fired when a player has been removed from this session and\r\n\t * there are now less player connected to this session than stated \r\n\t * in minPlayerNeeded.<br><br>\r\n\t * You could listen for this event to stop a running game when\r\n\t * the player count is getting to low.\r\n\t * @event module:client/session~Session#belowMinPlayerNeeded\r\n\t */\r\n\r\n\t/**\r\n\t * Fired when a new player has been added to this session and\r\n\t * there are now exactly as many players connected to this session\r\n\t * as stated in minPlayerNeeded.<br><br>\r\n\t * You could listen for this event to start your game when\r\n\t * enough players have connected.\r\n\t * @event module:client/session~Session#aboveMinPlayerNeeded\r\n\t */\r\n\r\n\t/**\r\n\t* Unpacks a session object send over a socket connection.\r\n\t* @returns {module:client/session~Session}\r\n\t*/\r\n\texports.fromPackedData = function (data, socket) {\r\n\t\tvar messageBus = new MessageBus(socket);\r\n\t\tvar myself = playerModule.fromPackedData(data.player, messageBus);\r\n\t\tvar session = new Session(myself, messageBus, data.session);\r\n\t\treturn session;\r\n\t};\r\n\r\n\treturn exports;\r\n\r\n});",
    "\n/* \n* To use this with require.js AND the node.js module system (on server and client side).\n* see https://github.com/jrburke/amdefine\n*/\nif (typeof define !== 'function') { var define = require('amdefine')(module); }\n\n\n/**\n * Here you can find some useful functions for working with colors.\n * @module\n * @private\n */\ndefine('../shared/color',['require','exports','module'],function(require, exports, module) {\n\n\t/**\n\t * @returns {string} a random color string using the format '#RRGGBB'\n\t */\n\texports.random = function () {\n\t\tvar color = 'ffff' + (Math.random()*0xFFFFFF<<0).toString(16);\n\t\tcolor = '#' + color.slice(-6);\n\t\treturn color;\n\t};\n\n\treturn exports;\n\n});",
    "\n/* \n* To use this with require.js AND the node.js module system (on server and client side).\n* see https://github.com/jrburke/amdefine\n*/\nif (typeof define !== 'function') { var define = require('amdefine')(module); }\n\n\n/**\n * Collection of Error classes that multi uses to communicate that\n * something went wrong.\n * @private\n * @module shared/errors\n */\ndefine('../shared/errors',['require','exports','module','util'],function(require, exports, module) {\n\n\tvar util = require('util');\n\n\t/**\n\t * The built in error object.\n\t * @external Error\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error}\n\t */\n\n\t/**\n\t * @classdesc Generic framewok error.\n\t * @class\n\t * @memberof module:shared/errors\n\t * @mixes external:Error\n\t */\n\tvar MultiError = exports.MultiError = function () {\n\t\tvar err = Error.apply(this, arguments);\n\t\tthis.stack = err.stack;\n\t\tthis.message = err.message;\n\t};\n\tutil.inherits(MultiError, Error);\n\n\t/**\n\t * @classdesc The session you were looking for was not found\n\t * on the server. Most likely the token has been misspelled.\n\t * @class\n\t * @mixes module:shared/errors.MultiError\n\t */\n\texports.NoSuchSessionError = function () {\n\t\tMultiError.call(this, 'the requested session does not exist');\n\t};\n\tutil.inherits(exports.NoSuchSessionError, MultiError);\n\n\n\t/**\n\t * @classdesc The session you wanted to create already exists.\n\t * This can happen when you have configured a static session \n\t * token inside the {@link SessionOptions} and are trying to \n\t * create this session more than once. Closing any open tabs\n\t * connected to this session may solve your problem.\n\t * @class\n\t * @mixes module:shared/errors.MultiError\n\t */\n\texports.TokenAlreadyExistsError = function () {\n\t\tMultiError.call(this, 'a session with this token does already exist');\n\t};\n\tutil.inherits(exports.TokenAlreadyExistsError, MultiError);\n\n\n\t/**\n\t * @classdesc The session you wanted to join already has enough\n\t * players. This happens when there are as many or more players \n\t * connected as defined in \n\t * {@link module:client/session~Session#maxPlayerAllowed maxPlayerAllowed}.\n\t * @class\n\t * @mixes module:shared/errors.MultiError\n\t */\n\texports.SessionFullError = function () {\n\t\tMultiError.call('the requested session is full');\n\t};\n\tutil.inherits(exports.SessionFullError, MultiError);\n\n\n\t/**\n\t * @classdesc You are not able to create or join a session\n\t * because there is no connection to the server. Maybe the\n\t * socket.io settings are wrong or the internet connection\n\t * dropped.\n\t * @class\n\t * @mixes module:shared/errors.MultiError\n\t */\n\texports.NoConnectionError = function () {\n\t\tMultiError.call(this, 'no connection to server');\n\t};\n\tutil.inherits(exports.NoConnectionError, MultiError);\n\n\n\t/**\n\t * @classdesc There could be no valid session token extracted\n\t * from the url. You may want to check if the current url has\n\t * the format http://myGameUrl/some/game#myToken\n\t * @class\n\t * @mixes module:shared/errors.MultiError\n\t */\n\texports.NoSessionTokenFoundError = function () {\n\t\tMultiError.call(this, 'no session token found in url');\n\t};\n\tutil.inherits(exports.NoSessionTokenFoundError, MultiError);\n\n\n\t/**\n\t * @classdesc New players are currently not allowed to join\n\t * this session. Maybe someone called \n\t * {@link module:client/session~Session#disablePlayerJoining}.\n\t * @class\n\t * @mixes module:shared/errors.MultiError\n\t */\n\texports.JoiningDisabledError = function () {\n\t\tMultiError.call(this, 'player joining is currently disabled');\n\t};\n\tutil.inherits(exports.JoiningDisabledError, MultiError);\n\n\n\treturn exports;\n\n});",
    "\n// vim:ts=4:sts=4:sw=4:\n/*!\n *\n * Copyright 2009-2012 Kris Kowal under the terms of the MIT\n * license found at http://github.com/kriskowal/q/raw/master/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n(function (definition) {\n    // Turn off strict mode for this function so we can assign to global.Q\n    /* jshint strict: false */\n\n    // This file will function properly as a <script> tag, or a module\n    // using CommonJS and NodeJS or RequireJS module formats.  In\n    // Common/Node/RequireJS, the module exports the Q API and when\n    // executed as a simple <script>, it creates a Q global instead.\n\n    // Montage Require\n    if (typeof bootstrap === \"function\") {\n        bootstrap(\"promise\", definition);\n\n    // CommonJS\n    } else if (typeof exports === \"object\") {\n        module.exports = definition();\n\n    // RequireJS\n    } else if (typeof define === \"function\" && define.amd) {\n        define('../lib/q',definition);\n\n    // SES (Secure EcmaScript)\n    } else if (typeof ses !== \"undefined\") {\n        if (!ses.ok()) {\n            return;\n        } else {\n            ses.makeQ = definition;\n        }\n\n    // <script>\n    } else {\n        Q = definition();\n    }\n\n})(function () {\n\"use strict\";\n\nvar hasStacks = false;\ntry {\n    throw new Error();\n} catch (e) {\n    hasStacks = !!e.stack;\n}\n\n// All code after this point will be filtered from stack traces reported\n// by Q.\nvar qStartingLine = captureLine();\nvar qFileName;\n\n// shims\n\n// used for fallback in \"allResolved\"\nvar noop = function () {};\n\n// Use the fastest possible means to execute a task in a future turn\n// of the event loop.\nvar nextTick =(function () {\n    // linked list of tasks (single, with head node)\n    var head = {task: void 0, next: null};\n    var tail = head;\n    var flushing = false;\n    var requestTick = void 0;\n    var isNodeJS = false;\n\n    function flush() {\n        /* jshint loopfunc: true */\n\n        while (head.next) {\n            head = head.next;\n            var task = head.task;\n            head.task = void 0;\n            var domain = head.domain;\n\n            if (domain) {\n                head.domain = void 0;\n                domain.enter();\n            }\n\n            try {\n                task();\n\n            } catch (e) {\n                if (isNodeJS) {\n                    // In node, uncaught exceptions are considered fatal errors.\n                    // Re-throw them synchronously to interrupt flushing!\n\n                    // Ensure continuation if the uncaught exception is suppressed\n                    // listening \"uncaughtException\" events (as domains does).\n                    // Continue in next event to avoid tick recursion.\n                    if (domain) {\n                        domain.exit();\n                    }\n                    setTimeout(flush, 0);\n                    if (domain) {\n                        domain.enter();\n                    }\n\n                    throw e;\n\n                } else {\n                    // In browsers, uncaught exceptions are not fatal.\n                    // Re-throw them asynchronously to avoid slow-downs.\n                    setTimeout(function() {\n                       throw e;\n                    }, 0);\n                }\n            }\n\n            if (domain) {\n                domain.exit();\n            }\n        }\n\n        flushing = false;\n    }\n\n    nextTick = function (task) {\n        tail = tail.next = {\n            task: task,\n            domain: isNodeJS && process.domain,\n            next: null\n        };\n\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n\n    if (typeof process !== \"undefined\" && process.nextTick) {\n        // Node.js before 0.9. Note that some fake-Node environments, like the\n        // Mocha test runner, introduce a `process` global without a `nextTick`.\n        isNodeJS = true;\n\n        requestTick = function () {\n            process.nextTick(flush);\n        };\n\n    } else if (typeof setImmediate === \"function\") {\n        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n        if (typeof window !== \"undefined\") {\n            requestTick = setImmediate.bind(window, flush);\n        } else {\n            requestTick = function () {\n                setImmediate(flush);\n            };\n        }\n\n    } else if (typeof MessageChannel !== \"undefined\") {\n        // modern browsers\n        // http://www.nonblocking.io/2011/06/windownexttick.html\n        var channel = new MessageChannel();\n        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n        // working message ports the first time a page loads.\n        channel.port1.onmessage = function () {\n            requestTick = requestPortTick;\n            channel.port1.onmessage = flush;\n            flush();\n        };\n        var requestPortTick = function () {\n            // Opera requires us to provide a message payload, regardless of\n            // whether we use it.\n            channel.port2.postMessage(0);\n        };\n        requestTick = function () {\n            setTimeout(flush, 0);\n            requestPortTick();\n        };\n\n    } else {\n        // old browsers\n        requestTick = function () {\n            setTimeout(flush, 0);\n        };\n    }\n\n    return nextTick;\n})();\n\n// Attempt to make generics safe in the face of downstream\n// modifications.\n// There is no situation where this is necessary.\n// If you need a security guarantee, these primordials need to be\n// deeply frozen anyway, and if you don’t need a security guarantee,\n// this is just plain paranoid.\n// However, this **might** have the nice side-effect of reducing the size of\n// the minified code by reducing x.call() to merely x()\n// See Mark Miller’s explanation of what this does.\n// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\nvar call = Function.call;\nfunction uncurryThis(f) {\n    return function () {\n        return call.apply(f, arguments);\n    };\n}\n// This is equivalent, but slower:\n// uncurryThis = Function_bind.bind(Function_bind.call);\n// http://jsperf.com/uncurrythis\n\nvar array_slice = uncurryThis(Array.prototype.slice);\n\nvar array_reduce = uncurryThis(\n    Array.prototype.reduce || function (callback, basis) {\n        var index = 0,\n            length = this.length;\n        // concerning the initial value, if one is not provided\n        if (arguments.length === 1) {\n            // seek to the first value in the array, accounting\n            // for the possibility that is is a sparse array\n            do {\n                if (index in this) {\n                    basis = this[index++];\n                    break;\n                }\n                if (++index >= length) {\n                    throw new TypeError();\n                }\n            } while (1);\n        }\n        // reduce\n        for (; index < length; index++) {\n            // account for the possibility that the array is sparse\n            if (index in this) {\n                basis = callback(basis, this[index], index);\n            }\n        }\n        return basis;\n    }\n);\n\nvar array_indexOf = uncurryThis(\n    Array.prototype.indexOf || function (value) {\n        // not a very good shim, but good enough for our one use of it\n        for (var i = 0; i < this.length; i++) {\n            if (this[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n);\n\nvar array_map = uncurryThis(\n    Array.prototype.map || function (callback, thisp) {\n        var self = this;\n        var collect = [];\n        array_reduce(self, function (undefined, value, index) {\n            collect.push(callback.call(thisp, value, index, self));\n        }, void 0);\n        return collect;\n    }\n);\n\nvar object_create = Object.create || function (prototype) {\n    function Type() { }\n    Type.prototype = prototype;\n    return new Type();\n};\n\nvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\nvar object_keys = Object.keys || function (object) {\n    var keys = [];\n    for (var key in object) {\n        if (object_hasOwnProperty(object, key)) {\n            keys.push(key);\n        }\n    }\n    return keys;\n};\n\nvar object_toString = uncurryThis(Object.prototype.toString);\n\nfunction isObject(value) {\n    return value === Object(value);\n}\n\n// generator related shims\n\n// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\nfunction isStopIteration(exception) {\n    return (\n        object_toString(exception) === \"[object StopIteration]\" ||\n        exception instanceof QReturnValue\n    );\n}\n\n// FIXME: Remove this helper and Q.return once ES6 generators are in\n// SpiderMonkey.\nvar QReturnValue;\nif (typeof ReturnValue !== \"undefined\") {\n    QReturnValue = ReturnValue;\n} else {\n    QReturnValue = function (value) {\n        this.value = value;\n    };\n}\n\n// Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n// engine that has a deployed base of browsers that support generators.\n// However, SM's generators use the Python-inspired semantics of\n// outdated ES6 drafts.  We would like to support ES6, but we'd also\n// like to make it possible to use generators in deployed browsers, so\n// we also support Python-style generators.  At some point we can remove\n// this block.\nvar hasES6Generators;\ntry {\n    /* jshint evil: true, nonew: false */\n    new Function(\"(function* (){ yield 1; })\");\n    hasES6Generators = true;\n} catch (e) {\n    hasES6Generators = false;\n}\n\n// long stack traces\n\nvar STACK_JUMP_SEPARATOR = \"From previous event:\";\n\nfunction makeStackTraceLong(error, promise) {\n    // If possible, transform the error stack trace by removing Node and Q\n    // cruft, then concatenating with the stack trace of `promise`. See #57.\n    if (hasStacks &&\n        promise.stack &&\n        typeof error === \"object\" &&\n        error !== null &&\n        error.stack &&\n        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1\n    ) {\n        var stacks = [];\n        for (var p = promise; !!p; p = p.source) {\n            if (p.stack) {\n                stacks.unshift(p.stack);\n            }\n        }\n        stacks.unshift(error.stack);\n\n        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n        error.stack = filterStackString(concatedStacks);\n    }\n}\n\nfunction filterStackString(stackString) {\n    var lines = stackString.split(\"\\n\");\n    var desiredLines = [];\n    for (var i = 0; i < lines.length; ++i) {\n        var line = lines[i];\n\n        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n            desiredLines.push(line);\n        }\n    }\n    return desiredLines.join(\"\\n\");\n}\n\nfunction isNodeFrame(stackLine) {\n    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n           stackLine.indexOf(\"(node.js:\") !== -1;\n}\n\nfunction getFileNameAndLineNumber(stackLine) {\n    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n    if (attempt1) {\n        return [attempt1[1], Number(attempt1[2])];\n    }\n\n    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n    if (attempt2) {\n        return [attempt2[1], Number(attempt2[2])];\n    }\n\n    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n    if (attempt3) {\n        return [attempt3[1], Number(attempt3[2])];\n    }\n}\n\nfunction isInternalFrame(stackLine) {\n    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\n    if (!fileNameAndLineNumber) {\n        return false;\n    }\n\n    var fileName = fileNameAndLineNumber[0];\n    var lineNumber = fileNameAndLineNumber[1];\n\n    return fileName === qFileName &&\n        lineNumber >= qStartingLine &&\n        lineNumber <= qEndingLine;\n}\n\n// discover own file name and line number range for filtering stack\n// traces\nfunction captureLine() {\n    if (!hasStacks) {\n        return;\n    }\n\n    try {\n        throw new Error();\n    } catch (e) {\n        var lines = e.stack.split(\"\\n\");\n        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n        if (!fileNameAndLineNumber) {\n            return;\n        }\n\n        qFileName = fileNameAndLineNumber[0];\n        return fileNameAndLineNumber[1];\n    }\n}\n\nfunction deprecate(callback, name, alternative) {\n    return function () {\n        if (typeof console !== \"undefined\" &&\n            typeof console.warn === \"function\") {\n            console.warn(name + \" is deprecated, use \" + alternative +\n                         \" instead.\", new Error(\"\").stack);\n        }\n        return callback.apply(callback, arguments);\n    };\n}\n\n// end of shims\n// beginning of real work\n\n/**\n * Constructs a promise for an immediate reference, passes promises through, or\n * coerces promises from different systems.\n * @param value immediate reference or promise\n */\nfunction Q(value) {\n    // If the object is already a Promise, return it directly.  This enables\n    // the resolve function to both be used to created references from objects,\n    // but to tolerably coerce non-promises to promises.\n    if (isPromise(value)) {\n        return value;\n    }\n\n    // assimilate thenables\n    if (isPromiseAlike(value)) {\n        return coerce(value);\n    } else {\n        return fulfill(value);\n    }\n}\nQ.resolve = Q;\n\n/**\n * Performs a task in a future turn of the event loop.\n * @param {Function} task\n */\nQ.nextTick = nextTick;\n\n/**\n * Controls whether or not long stack traces will be on\n */\nQ.longStackSupport = false;\n\n/**\n * Constructs a {promise, resolve, reject} object.\n *\n * `resolve` is a callback to invoke with a more resolved value for the\n * promise. To fulfill the promise, invoke `resolve` with any value that is\n * not a thenable. To reject the promise, invoke `resolve` with a rejected\n * thenable, or invoke `reject` with the reason directly. To resolve the\n * promise to another thenable, thus putting it in the same state, invoke\n * `resolve` with that other thenable.\n */\nQ.defer = defer;\nfunction defer() {\n    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n    // element of the messages array is itself an array of complete arguments to\n    // forward to the resolved promise.  We coerce the resolution value to a\n    // promise using the `resolve` function because it handles both fully\n    // non-thenable values and other thenables gracefully.\n    var messages = [], progressListeners = [], resolvedPromise;\n\n    var deferred = object_create(defer.prototype);\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, operands) {\n        var args = array_slice(arguments);\n        if (messages) {\n            messages.push(args);\n            if (op === \"when\" && operands[1]) { // progress operand\n                progressListeners.push(operands[1]);\n            }\n        } else {\n            nextTick(function () {\n                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n            });\n        }\n    };\n\n    // XXX deprecated\n    promise.valueOf = function () {\n        if (messages) {\n            return promise;\n        }\n        var nearerValue = nearer(resolvedPromise);\n        if (isPromise(nearerValue)) {\n            resolvedPromise = nearerValue; // shorten chain\n        }\n        return nearerValue;\n    };\n\n    promise.inspect = function () {\n        if (!resolvedPromise) {\n            return { state: \"pending\" };\n        }\n        return resolvedPromise.inspect();\n    };\n\n    if (Q.longStackSupport && hasStacks) {\n        try {\n            throw new Error();\n        } catch (e) {\n            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n            // accessor around; that causes memory leaks as per GH-111. Just\n            // reify the stack trace as a string ASAP.\n            //\n            // At the same time, cut off the first line; it's always just\n            // \"[object Promise]\\n\", as per the `toString`.\n            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n        }\n    }\n\n    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n    // consolidating them into `become`, since otherwise we'd create new\n    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\n    function become(newPromise) {\n        resolvedPromise = newPromise;\n        promise.source = newPromise;\n\n        array_reduce(messages, function (undefined, message) {\n            nextTick(function () {\n                newPromise.promiseDispatch.apply(newPromise, message);\n            });\n        }, void 0);\n\n        messages = void 0;\n        progressListeners = void 0;\n    }\n\n    deferred.promise = promise;\n    deferred.resolve = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(Q(value));\n    };\n\n    deferred.fulfill = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(fulfill(value));\n    };\n    deferred.reject = function (reason) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(reject(reason));\n    };\n    deferred.notify = function (progress) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        array_reduce(progressListeners, function (undefined, progressListener) {\n            nextTick(function () {\n                progressListener(progress);\n            });\n        }, void 0);\n    };\n\n    return deferred;\n}\n\n/**\n * Creates a Node-style callback that will resolve or reject the deferred\n * promise.\n * @returns a nodeback\n */\ndefer.prototype.makeNodeResolver = function () {\n    var self = this;\n    return function (error, value) {\n        if (error) {\n            self.reject(error);\n        } else if (arguments.length > 2) {\n            self.resolve(array_slice(arguments, 1));\n        } else {\n            self.resolve(value);\n        }\n    };\n};\n\n/**\n * @param resolver {Function} a function that returns nothing and accepts\n * the resolve, reject, and notify functions for a deferred.\n * @returns a promise that may be resolved with the given resolve and reject\n * functions, or rejected by a thrown exception in resolver\n */\nQ.promise = promise;\nfunction promise(resolver) {\n    if (typeof resolver !== \"function\") {\n        throw new TypeError(\"resolver must be a function.\");\n    }\n    var deferred = defer();\n    try {\n        resolver(deferred.resolve, deferred.reject, deferred.notify);\n    } catch (reason) {\n        deferred.reject(reason);\n    }\n    return deferred.promise;\n}\n\n// XXX experimental.  This method is a way to denote that a local value is\n// serializable and should be immediately dispatched to a remote upon request,\n// instead of passing a reference.\nQ.passByCopy = function (object) {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return object;\n};\n\nPromise.prototype.passByCopy = function () {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return this;\n};\n\n/**\n * If two promises eventually fulfill to the same value, promises that value,\n * but otherwise rejects.\n * @param x {Any*}\n * @param y {Any*}\n * @returns {Any*} a promise for x and y if they are the same, but a rejection\n * otherwise.\n *\n */\nQ.join = function (x, y) {\n    return Q(x).join(y);\n};\n\nPromise.prototype.join = function (that) {\n    return Q([this, that]).spread(function (x, y) {\n        if (x === y) {\n            // TODO: \"===\" should be Object.is or equiv\n            return x;\n        } else {\n            throw new Error(\"Can't join: not the same: \" + x + \" \" + y);\n        }\n    });\n};\n\n/**\n * Returns a promise for the first of an array of promises to become fulfilled.\n * @param answers {Array[Any*]} promises to race\n * @returns {Any*} the first promise to be fulfilled\n */\nQ.race = race;\nfunction race(answerPs) {\n    return promise(function(resolve, reject) {\n        // Switch to this once we can assume at least ES5\n        // answerPs.forEach(function(answerP) {\n        //     Q(answerP).then(resolve, reject);\n        // });\n        // Use this in the meantime\n        for (var i = 0, len = answerPs.length; i < len; i++) {\n            Q(answerPs[i]).then(resolve, reject);\n        }\n    });\n}\n\nPromise.prototype.race = function () {\n    return this.then(Q.race);\n};\n\n/**\n * Constructs a Promise with a promise descriptor object and optional fallback\n * function.  The descriptor contains methods like when(rejected), get(name),\n * set(name, value), post(name, args), and delete(name), which all\n * return either a value, a promise for a value, or a rejection.  The fallback\n * accepts the operation name, a resolver, and any further arguments that would\n * have been forwarded to the appropriate method above had a method been\n * provided with the proper name.  The API makes no guarantees about the nature\n * of the returned object, apart from that it is usable whereever promises are\n * bought and sold.\n */\nQ.makePromise = Promise;\nfunction Promise(descriptor, fallback, inspect) {\n    if (fallback === void 0) {\n        fallback = function (op) {\n            return reject(new Error(\n                \"Promise does not support operation: \" + op\n            ));\n        };\n    }\n    if (inspect === void 0) {\n        inspect = function () {\n            return {state: \"unknown\"};\n        };\n    }\n\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, args) {\n        var result;\n        try {\n            if (descriptor[op]) {\n                result = descriptor[op].apply(promise, args);\n            } else {\n                result = fallback.call(promise, op, args);\n            }\n        } catch (exception) {\n            result = reject(exception);\n        }\n        if (resolve) {\n            resolve(result);\n        }\n    };\n\n    promise.inspect = inspect;\n\n    // XXX deprecated `valueOf` and `exception` support\n    if (inspect) {\n        var inspected = inspect();\n        if (inspected.state === \"rejected\") {\n            promise.exception = inspected.reason;\n        }\n\n        promise.valueOf = function () {\n            var inspected = inspect();\n            if (inspected.state === \"pending\" ||\n                inspected.state === \"rejected\") {\n                return promise;\n            }\n            return inspected.value;\n        };\n    }\n\n    return promise;\n}\n\nPromise.prototype.toString = function () {\n    return \"[object Promise]\";\n};\n\nPromise.prototype.then = function (fulfilled, rejected, progressed) {\n    var self = this;\n    var deferred = defer();\n    var done = false;   // ensure the untrusted promise makes at most a\n                        // single call to one of the callbacks\n\n    function _fulfilled(value) {\n        try {\n            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n        } catch (exception) {\n            return reject(exception);\n        }\n    }\n\n    function _rejected(exception) {\n        if (typeof rejected === \"function\") {\n            makeStackTraceLong(exception, self);\n            try {\n                return rejected(exception);\n            } catch (newException) {\n                return reject(newException);\n            }\n        }\n        return reject(exception);\n    }\n\n    function _progressed(value) {\n        return typeof progressed === \"function\" ? progressed(value) : value;\n    }\n\n    nextTick(function () {\n        self.promiseDispatch(function (value) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_fulfilled(value));\n        }, \"when\", [function (exception) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_rejected(exception));\n        }]);\n    });\n\n    // Progress propagator need to be attached in the current tick.\n    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n        var newValue;\n        var threw = false;\n        try {\n            newValue = _progressed(value);\n        } catch (e) {\n            threw = true;\n            if (Q.onerror) {\n                Q.onerror(e);\n            } else {\n                throw e;\n            }\n        }\n\n        if (!threw) {\n            deferred.notify(newValue);\n        }\n    }]);\n\n    return deferred.promise;\n};\n\n/**\n * Registers an observer on a promise.\n *\n * Guarantees:\n *\n * 1. that fulfilled and rejected will be called only once.\n * 2. that either the fulfilled callback or the rejected callback will be\n *    called, but not both.\n * 3. that fulfilled and rejected will not be called in this turn.\n *\n * @param value      promise or immediate reference to observe\n * @param fulfilled  function to be called with the fulfilled value\n * @param rejected   function to be called with the rejection exception\n * @param progressed function to be called on any progress notifications\n * @return promise for the return value from the invoked callback\n */\nQ.when = when;\nfunction when(value, fulfilled, rejected, progressed) {\n    return Q(value).then(fulfilled, rejected, progressed);\n}\n\nPromise.prototype.thenResolve = function (value) {\n    return this.then(function () { return value; });\n};\n\nQ.thenResolve = function (promise, value) {\n    return Q(promise).thenResolve(value);\n};\n\nPromise.prototype.thenReject = function (reason) {\n    return this.then(function () { throw reason; });\n};\n\nQ.thenReject = function (promise, reason) {\n    return Q(promise).thenReject(reason);\n};\n\n/**\n * If an object is not a promise, it is as \"near\" as possible.\n * If a promise is rejected, it is as \"near\" as possible too.\n * If it’s a fulfilled promise, the fulfillment value is nearer.\n * If it’s a deferred promise and the deferred has been resolved, the\n * resolution is \"nearer\".\n * @param object\n * @returns most resolved (nearest) form of the object\n */\n\n// XXX should we re-do this?\nQ.nearer = nearer;\nfunction nearer(value) {\n    if (isPromise(value)) {\n        var inspected = value.inspect();\n        if (inspected.state === \"fulfilled\") {\n            return inspected.value;\n        }\n    }\n    return value;\n}\n\n/**\n * @returns whether the given object is a promise.\n * Otherwise it is a fulfilled value.\n */\nQ.isPromise = isPromise;\nfunction isPromise(object) {\n    return isObject(object) &&\n        typeof object.promiseDispatch === \"function\" &&\n        typeof object.inspect === \"function\";\n}\n\nQ.isPromiseAlike = isPromiseAlike;\nfunction isPromiseAlike(object) {\n    return isObject(object) && typeof object.then === \"function\";\n}\n\n/**\n * @returns whether the given object is a pending promise, meaning not\n * fulfilled or rejected.\n */\nQ.isPending = isPending;\nfunction isPending(object) {\n    return isPromise(object) && object.inspect().state === \"pending\";\n}\n\nPromise.prototype.isPending = function () {\n    return this.inspect().state === \"pending\";\n};\n\n/**\n * @returns whether the given object is a value or fulfilled\n * promise.\n */\nQ.isFulfilled = isFulfilled;\nfunction isFulfilled(object) {\n    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n}\n\nPromise.prototype.isFulfilled = function () {\n    return this.inspect().state === \"fulfilled\";\n};\n\n/**\n * @returns whether the given object is a rejected promise.\n */\nQ.isRejected = isRejected;\nfunction isRejected(object) {\n    return isPromise(object) && object.inspect().state === \"rejected\";\n}\n\nPromise.prototype.isRejected = function () {\n    return this.inspect().state === \"rejected\";\n};\n\n//// BEGIN UNHANDLED REJECTION TRACKING\n\n// This promise library consumes exceptions thrown in handlers so they can be\n// handled by a subsequent promise.  The exceptions get added to this array when\n// they are created, and removed when they are handled.  Note that in ES6 or\n// shimmed environments, this would naturally be a `Set`.\nvar unhandledReasons = [];\nvar unhandledRejections = [];\nvar unhandledReasonsDisplayed = false;\nvar trackUnhandledRejections = true;\nfunction displayUnhandledReasons() {\n    if (\n        !unhandledReasonsDisplayed &&\n        typeof window !== \"undefined\" &&\n        window.console\n    ) {\n        console.warn(\"[Q] Unhandled rejection reasons (should be empty):\",\n                     unhandledReasons);\n    }\n\n    unhandledReasonsDisplayed = true;\n}\n\nfunction logUnhandledReasons() {\n    for (var i = 0; i < unhandledReasons.length; i++) {\n        var reason = unhandledReasons[i];\n        console.warn(\"Unhandled rejection reason:\", reason);\n    }\n}\n\nfunction resetUnhandledRejections() {\n    unhandledReasons.length = 0;\n    unhandledRejections.length = 0;\n    unhandledReasonsDisplayed = false;\n\n    if (!trackUnhandledRejections) {\n        trackUnhandledRejections = true;\n\n        // Show unhandled rejection reasons if Node exits without handling an\n        // outstanding rejection.  (Note that Browserify presently produces a\n        // `process` global without the `EventEmitter` `on` method.)\n        if (typeof process !== \"undefined\" && process.on) {\n            process.on(\"exit\", logUnhandledReasons);\n        }\n    }\n}\n\nfunction trackRejection(promise, reason) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n\n    unhandledRejections.push(promise);\n    if (reason && typeof reason.stack !== \"undefined\") {\n        unhandledReasons.push(reason.stack);\n    } else {\n        unhandledReasons.push(\"(no stack) \" + reason);\n    }\n    displayUnhandledReasons();\n}\n\nfunction untrackRejection(promise) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n\n    var at = array_indexOf(unhandledRejections, promise);\n    if (at !== -1) {\n        unhandledRejections.splice(at, 1);\n        unhandledReasons.splice(at, 1);\n    }\n}\n\nQ.resetUnhandledRejections = resetUnhandledRejections;\n\nQ.getUnhandledReasons = function () {\n    // Make a copy so that consumers can't interfere with our internal state.\n    return unhandledReasons.slice();\n};\n\nQ.stopUnhandledRejectionTracking = function () {\n    resetUnhandledRejections();\n    if (typeof process !== \"undefined\" && process.on) {\n        process.removeListener(\"exit\", logUnhandledReasons);\n    }\n    trackUnhandledRejections = false;\n};\n\nresetUnhandledRejections();\n\n//// END UNHANDLED REJECTION TRACKING\n\n/**\n * Constructs a rejected promise.\n * @param reason value describing the failure\n */\nQ.reject = reject;\nfunction reject(reason) {\n    var rejection = Promise({\n        \"when\": function (rejected) {\n            // note that the error has been handled\n            if (rejected) {\n                untrackRejection(this);\n            }\n            return rejected ? rejected(reason) : this;\n        }\n    }, function fallback() {\n        return this;\n    }, function inspect() {\n        return { state: \"rejected\", reason: reason };\n    });\n\n    // Note that the reason has not been handled.\n    trackRejection(rejection, reason);\n\n    return rejection;\n}\n\n/**\n * Constructs a fulfilled promise for an immediate reference.\n * @param value immediate reference\n */\nQ.fulfill = fulfill;\nfunction fulfill(value) {\n    return Promise({\n        \"when\": function () {\n            return value;\n        },\n        \"get\": function (name) {\n            return value[name];\n        },\n        \"set\": function (name, rhs) {\n            value[name] = rhs;\n        },\n        \"delete\": function (name) {\n            delete value[name];\n        },\n        \"post\": function (name, args) {\n            // Mark Miller proposes that post with no name should apply a\n            // promised function.\n            if (name === null || name === void 0) {\n                return value.apply(void 0, args);\n            } else {\n                return value[name].apply(value, args);\n            }\n        },\n        \"apply\": function (thisp, args) {\n            return value.apply(thisp, args);\n        },\n        \"keys\": function () {\n            return object_keys(value);\n        }\n    }, void 0, function inspect() {\n        return { state: \"fulfilled\", value: value };\n    });\n}\n\n/**\n * Converts thenables to Q promises.\n * @param promise thenable promise\n * @returns a Q promise\n */\nfunction coerce(promise) {\n    var deferred = defer();\n    nextTick(function () {\n        try {\n            promise.then(deferred.resolve, deferred.reject, deferred.notify);\n        } catch (exception) {\n            deferred.reject(exception);\n        }\n    });\n    return deferred.promise;\n}\n\n/**\n * Annotates an object such that it will never be\n * transferred away from this process over any promise\n * communication channel.\n * @param object\n * @returns promise a wrapping of that object that\n * additionally responds to the \"isDef\" message\n * without a rejection.\n */\nQ.master = master;\nfunction master(object) {\n    return Promise({\n        \"isDef\": function () {}\n    }, function fallback(op, args) {\n        return dispatch(object, op, args);\n    }, function () {\n        return Q(object).inspect();\n    });\n}\n\n/**\n * Spreads the values of a promised array of arguments into the\n * fulfillment callback.\n * @param fulfilled callback that receives variadic arguments from the\n * promised array\n * @param rejected callback that receives the exception if the promise\n * is rejected.\n * @returns a promise for the return value or thrown exception of\n * either callback.\n */\nQ.spread = spread;\nfunction spread(value, fulfilled, rejected) {\n    return Q(value).spread(fulfilled, rejected);\n}\n\nPromise.prototype.spread = function (fulfilled, rejected) {\n    return this.all().then(function (array) {\n        return fulfilled.apply(void 0, array);\n    }, rejected);\n};\n\n/**\n * The async function is a decorator for generator functions, turning\n * them into asynchronous generators.  Although generators are only part\n * of the newest ECMAScript 6 drafts, this code does not cause syntax\n * errors in older engines.  This code should continue to work and will\n * in fact improve over time as the language improves.\n *\n * ES6 generators are currently part of V8 version 3.19 with the\n * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n * for longer, but under an older Python-inspired form.  This function\n * works on both kinds of generators.\n *\n * Decorates a generator function such that:\n *  - it may yield promises\n *  - execution will continue when that promise is fulfilled\n *  - the value of the yield expression will be the fulfilled value\n *  - it returns a promise for the return value (when the generator\n *    stops iterating)\n *  - the decorated function returns a promise for the return value\n *    of the generator or the first rejected promise among those\n *    yielded.\n *  - if an error is thrown in the generator, it propagates through\n *    every following yield until it is caught, or until it escapes\n *    the generator function altogether, and is translated into a\n *    rejection for the promise returned by the decorated generator.\n */\nQ.async = async;\nfunction async(makeGenerator) {\n    return function () {\n        // when verb is \"send\", arg is a value\n        // when verb is \"throw\", arg is an exception\n        function continuer(verb, arg) {\n            var result;\n            if (hasES6Generators) {\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    return reject(exception);\n                }\n                if (result.done) {\n                    return result.value;\n                } else {\n                    return when(result.value, callback, errback);\n                }\n            } else {\n                // FIXME: Remove this case when SM does ES6 generators.\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    if (isStopIteration(exception)) {\n                        return exception.value;\n                    } else {\n                        return reject(exception);\n                    }\n                }\n                return when(result, callback, errback);\n            }\n        }\n        var generator = makeGenerator.apply(this, arguments);\n        var callback = continuer.bind(continuer, \"next\");\n        var errback = continuer.bind(continuer, \"throw\");\n        return callback();\n    };\n}\n\n/**\n * The spawn function is a small wrapper around async that immediately\n * calls the generator and also ends the promise chain, so that any\n * unhandled errors are thrown instead of forwarded to the error\n * handler. This is useful because it's extremely common to run\n * generators at the top-level to work with libraries.\n */\nQ.spawn = spawn;\nfunction spawn(makeGenerator) {\n    Q.done(Q.async(makeGenerator)());\n}\n\n// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n/**\n * Throws a ReturnValue exception to stop an asynchronous generator.\n *\n * This interface is a stop-gap measure to support generator return\n * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n * generators like Chromium 29, just use \"return\" in your generator\n * functions.\n *\n * @param value the return value for the surrounding generator\n * @throws ReturnValue exception with the value.\n * @example\n * // ES6 style\n * Q.async(function* () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      return foo + bar;\n * })\n * // Older SpiderMonkey style\n * Q.async(function () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      Q.return(foo + bar);\n * })\n */\nQ[\"return\"] = _return;\nfunction _return(value) {\n    throw new QReturnValue(value);\n}\n\n/**\n * The promised function decorator ensures that any promise arguments\n * are settled and passed as values (`this` is also settled and passed\n * as a value).  It will also ensure that the result of a function is\n * always a promise.\n *\n * @example\n * var add = Q.promised(function (a, b) {\n *     return a + b;\n * });\n * add(Q(a), Q(B));\n *\n * @param {function} callback The function to decorate\n * @returns {function} a function that has been decorated.\n */\nQ.promised = promised;\nfunction promised(callback) {\n    return function () {\n        return spread([this, all(arguments)], function (self, args) {\n            return callback.apply(self, args);\n        });\n    };\n}\n\n/**\n * sends a message to a value in a future turn\n * @param object* the recipient\n * @param op the name of the message operation, e.g., \"when\",\n * @param args further arguments to be forwarded to the operation\n * @returns result {Promise} a promise for the result of the operation\n */\nQ.dispatch = dispatch;\nfunction dispatch(object, op, args) {\n    return Q(object).dispatch(op, args);\n}\n\nPromise.prototype.dispatch = function (op, args) {\n    var self = this;\n    var deferred = defer();\n    nextTick(function () {\n        self.promiseDispatch(deferred.resolve, op, args);\n    });\n    return deferred.promise;\n};\n\n/**\n * Gets the value of a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to get\n * @return promise for the property value\n */\nQ.get = function (object, key) {\n    return Q(object).dispatch(\"get\", [key]);\n};\n\nPromise.prototype.get = function (key) {\n    return this.dispatch(\"get\", [key]);\n};\n\n/**\n * Sets the value of a property in a future turn.\n * @param object    promise or immediate reference for object object\n * @param name      name of property to set\n * @param value     new value of property\n * @return promise for the return value\n */\nQ.set = function (object, key, value) {\n    return Q(object).dispatch(\"set\", [key, value]);\n};\n\nPromise.prototype.set = function (key, value) {\n    return this.dispatch(\"set\", [key, value]);\n};\n\n/**\n * Deletes a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to delete\n * @return promise for the return value\n */\nQ.del = // XXX legacy\nQ[\"delete\"] = function (object, key) {\n    return Q(object).dispatch(\"delete\", [key]);\n};\n\nPromise.prototype.del = // XXX legacy\nPromise.prototype[\"delete\"] = function (key) {\n    return this.dispatch(\"delete\", [key]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param value     a value to post, typically an array of\n *                  invocation arguments for promises that\n *                  are ultimately backed with `resolve` values,\n *                  as opposed to those backed with URLs\n *                  wherein the posted value can be any\n *                  JSON serializable object.\n * @return promise for the return value\n */\n// bound locally because it is used by other methods\nQ.mapply = // XXX As proposed by \"Redsandro\"\nQ.post = function (object, name, args) {\n    return Q(object).dispatch(\"post\", [name, args]);\n};\n\nPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.post = function (name, args) {\n    return this.dispatch(\"post\", [name, args]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param ...args   array of invocation arguments\n * @return promise for the return value\n */\nQ.send = // XXX Mark Miller's proposed parlance\nQ.mcall = // XXX As proposed by \"Redsandro\"\nQ.invoke = function (object, name /*...args*/) {\n    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n};\n\nPromise.prototype.send = // XXX Mark Miller's proposed parlance\nPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\nPromise.prototype.invoke = function (name /*...args*/) {\n    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n};\n\n/**\n * Applies the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param args      array of application arguments\n */\nQ.fapply = function (object, args) {\n    return Q(object).dispatch(\"apply\", [void 0, args]);\n};\n\nPromise.prototype.fapply = function (args) {\n    return this.dispatch(\"apply\", [void 0, args]);\n};\n\n/**\n * Calls the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ[\"try\"] =\nQ.fcall = function (object /* ...args*/) {\n    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n};\n\nPromise.prototype.fcall = function (/*...args*/) {\n    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n};\n\n/**\n * Binds the promised function, transforming return values into a fulfilled\n * promise and thrown errors into a rejected one.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ.fbind = function (object /*...args*/) {\n    var promise = Q(object);\n    var args = array_slice(arguments, 1);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\nPromise.prototype.fbind = function (/*...args*/) {\n    var promise = this;\n    var args = array_slice(arguments);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\n\n/**\n * Requests the names of the owned properties of a promised\n * object in a future turn.\n * @param object    promise or immediate reference for target object\n * @return promise for the keys of the eventually settled object\n */\nQ.keys = function (object) {\n    return Q(object).dispatch(\"keys\", []);\n};\n\nPromise.prototype.keys = function () {\n    return this.dispatch(\"keys\", []);\n};\n\n/**\n * Turns an array of promises into a promise for an array.  If any of\n * the promises gets rejected, the whole array is rejected immediately.\n * @param {Array*} an array (or promise for an array) of values (or\n * promises for values)\n * @returns a promise for an array of the corresponding values\n */\n// By Mark Miller\n// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\nQ.all = all;\nfunction all(promises) {\n    return when(promises, function (promises) {\n        var countDown = 0;\n        var deferred = defer();\n        array_reduce(promises, function (undefined, promise, index) {\n            var snapshot;\n            if (\n                isPromise(promise) &&\n                (snapshot = promise.inspect()).state === \"fulfilled\"\n            ) {\n                promises[index] = snapshot.value;\n            } else {\n                ++countDown;\n                when(\n                    promise,\n                    function (value) {\n                        promises[index] = value;\n                        if (--countDown === 0) {\n                            deferred.resolve(promises);\n                        }\n                    },\n                    deferred.reject,\n                    function (progress) {\n                        deferred.notify({ index: index, value: progress });\n                    }\n                );\n            }\n        }, void 0);\n        if (countDown === 0) {\n            deferred.resolve(promises);\n        }\n        return deferred.promise;\n    });\n}\n\nPromise.prototype.all = function () {\n    return all(this);\n};\n\n/**\n * Waits for all promises to be settled, either fulfilled or\n * rejected.  This is distinct from `all` since that would stop\n * waiting at the first rejection.  The promise returned by\n * `allResolved` will never be rejected.\n * @param promises a promise for an array (or an array) of promises\n * (or values)\n * @return a promise for an array of promises\n */\nQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\nfunction allResolved(promises) {\n    return when(promises, function (promises) {\n        promises = array_map(promises, Q);\n        return when(all(array_map(promises, function (promise) {\n            return when(promise, noop, noop);\n        })), function () {\n            return promises;\n        });\n    });\n}\n\nPromise.prototype.allResolved = function () {\n    return allResolved(this);\n};\n\n/**\n * @see Promise#allSettled\n */\nQ.allSettled = allSettled;\nfunction allSettled(promises) {\n    return Q(promises).allSettled();\n}\n\n/**\n * Turns an array of promises into a promise for an array of their states (as\n * returned by `inspect`) when they have all settled.\n * @param {Array[Any*]} values an array (or promise for an array) of values (or\n * promises for values)\n * @returns {Array[State]} an array of states for the respective values.\n */\nPromise.prototype.allSettled = function () {\n    return this.then(function (promises) {\n        return all(array_map(promises, function (promise) {\n            promise = Q(promise);\n            function regardless() {\n                return promise.inspect();\n            }\n            return promise.then(regardless, regardless);\n        }));\n    });\n};\n\n/**\n * Captures the failure of a promise, giving an oportunity to recover\n * with a callback.  If the given promise is fulfilled, the returned\n * promise is fulfilled.\n * @param {Any*} promise for something\n * @param {Function} callback to fulfill the returned promise if the\n * given promise is rejected\n * @returns a promise for the return value of the callback\n */\nQ.fail = // XXX legacy\nQ[\"catch\"] = function (object, rejected) {\n    return Q(object).then(void 0, rejected);\n};\n\nPromise.prototype.fail = // XXX legacy\nPromise.prototype[\"catch\"] = function (rejected) {\n    return this.then(void 0, rejected);\n};\n\n/**\n * Attaches a listener that can respond to progress notifications from a\n * promise's originating deferred. This listener receives the exact arguments\n * passed to ``deferred.notify``.\n * @param {Any*} promise for something\n * @param {Function} callback to receive any progress notifications\n * @returns the given promise, unchanged\n */\nQ.progress = progress;\nfunction progress(object, progressed) {\n    return Q(object).then(void 0, void 0, progressed);\n}\n\nPromise.prototype.progress = function (progressed) {\n    return this.then(void 0, void 0, progressed);\n};\n\n/**\n * Provides an opportunity to observe the settling of a promise,\n * regardless of whether the promise is fulfilled or rejected.  Forwards\n * the resolution to the returned promise when the callback is done.\n * The callback can return a promise to defer completion.\n * @param {Any*} promise\n * @param {Function} callback to observe the resolution of the given\n * promise, takes no arguments.\n * @returns a promise for the resolution of the given promise when\n * ``fin`` is done.\n */\nQ.fin = // XXX legacy\nQ[\"finally\"] = function (object, callback) {\n    return Q(object)[\"finally\"](callback);\n};\n\nPromise.prototype.fin = // XXX legacy\nPromise.prototype[\"finally\"] = function (callback) {\n    callback = Q(callback);\n    return this.then(function (value) {\n        return callback.fcall().then(function () {\n            return value;\n        });\n    }, function (reason) {\n        // TODO attempt to recycle the rejection with \"this\".\n        return callback.fcall().then(function () {\n            throw reason;\n        });\n    });\n};\n\n/**\n * Terminates a chain of promises, forcing rejections to be\n * thrown as exceptions.\n * @param {Any*} promise at the end of a chain of promises\n * @returns nothing\n */\nQ.done = function (object, fulfilled, rejected, progress) {\n    return Q(object).done(fulfilled, rejected, progress);\n};\n\nPromise.prototype.done = function (fulfilled, rejected, progress) {\n    var onUnhandledError = function (error) {\n        // forward to a future turn so that ``when``\n        // does not catch it and turn it into a rejection.\n        nextTick(function () {\n            makeStackTraceLong(error, promise);\n            if (Q.onerror) {\n                Q.onerror(error);\n            } else {\n                throw error;\n            }\n        });\n    };\n\n    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n    var promise = fulfilled || rejected || progress ?\n        this.then(fulfilled, rejected, progress) :\n        this;\n\n    if (typeof process === \"object\" && process && process.domain) {\n        onUnhandledError = process.domain.bind(onUnhandledError);\n    }\n\n    promise.then(void 0, onUnhandledError);\n};\n\n/**\n * Causes a promise to be rejected if it does not get fulfilled before\n * some milliseconds time out.\n * @param {Any*} promise\n * @param {Number} milliseconds timeout\n * @param {String} custom error message (optional)\n * @returns a promise for the resolution of the given promise if it is\n * fulfilled before the timeout, otherwise rejected.\n */\nQ.timeout = function (object, ms, message) {\n    return Q(object).timeout(ms, message);\n};\n\nPromise.prototype.timeout = function (ms, message) {\n    var deferred = defer();\n    var timeoutId = setTimeout(function () {\n        deferred.reject(new Error(message || \"Timed out after \" + ms + \" ms\"));\n    }, ms);\n\n    this.then(function (value) {\n        clearTimeout(timeoutId);\n        deferred.resolve(value);\n    }, function (exception) {\n        clearTimeout(timeoutId);\n        deferred.reject(exception);\n    }, deferred.notify);\n\n    return deferred.promise;\n};\n\n/**\n * Returns a promise for the given value (or promised value), some\n * milliseconds after it resolved. Passes rejections immediately.\n * @param {Any*} promise\n * @param {Number} milliseconds\n * @returns a promise for the resolution of the given promise after milliseconds\n * time has elapsed since the resolution of the given promise.\n * If the given promise rejects, that is passed immediately.\n */\nQ.delay = function (object, timeout) {\n    if (timeout === void 0) {\n        timeout = object;\n        object = void 0;\n    }\n    return Q(object).delay(timeout);\n};\n\nPromise.prototype.delay = function (timeout) {\n    return this.then(function (value) {\n        var deferred = defer();\n        setTimeout(function () {\n            deferred.resolve(value);\n        }, timeout);\n        return deferred.promise;\n    });\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided as an array, and returns a promise.\n *\n *      Q.nfapply(FS.readFile, [__filename])\n *      .then(function (content) {\n *      })\n *\n */\nQ.nfapply = function (callback, args) {\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfapply = function (args) {\n    var deferred = defer();\n    var nodeArgs = array_slice(args);\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided individually, and returns a promise.\n * @example\n * Q.nfcall(FS.readFile, __filename)\n * .then(function (content) {\n * })\n *\n */\nQ.nfcall = function (callback /*...args*/) {\n    var args = array_slice(arguments, 1);\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfcall = function (/*...args*/) {\n    var nodeArgs = array_slice(arguments);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Wraps a NodeJS continuation passing function and returns an equivalent\n * version that returns a promise.\n * @example\n * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n * .then(console.log)\n * .done()\n */\nQ.nfbind =\nQ.denodeify = function (callback /*...args*/) {\n    var baseArgs = array_slice(arguments, 1);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        Q(callback).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nfbind =\nPromise.prototype.denodeify = function (/*...args*/) {\n    var args = array_slice(arguments);\n    args.unshift(this);\n    return Q.denodeify.apply(void 0, args);\n};\n\nQ.nbind = function (callback, thisp /*...args*/) {\n    var baseArgs = array_slice(arguments, 2);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        function bound() {\n            return callback.apply(thisp, arguments);\n        }\n        Q(bound).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nbind = function (/*thisp, ...args*/) {\n    var args = array_slice(arguments, 0);\n    args.unshift(this);\n    return Q.nbind.apply(void 0, args);\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback with a given array of arguments, plus a provided callback.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param {Array} args arguments to pass to the method; the callback\n * will be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nmapply = // XXX As proposed by \"Redsandro\"\nQ.npost = function (object, name, args) {\n    return Q(object).npost(name, args);\n};\n\nPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.npost = function (name, args) {\n    var nodeArgs = array_slice(args || []);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback, forwarding the given variadic arguments, plus a provided\n * callback argument.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param ...args arguments to pass to the method; the callback will\n * be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\nQ.nmcall = // XXX Based on \"Redsandro's\" proposal\nQ.ninvoke = function (object, name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 2);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\nPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\nPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\nPromise.prototype.ninvoke = function (name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 1);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * If a function would like to support both Node continuation-passing-style and\n * promise-returning-style, it can end its internal promise chain with\n * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n * elects to use a nodeback, the result will be sent there.  If they do not\n * pass a nodeback, they will receive the result promise.\n * @param object a result (or a promise for a result)\n * @param {Function} nodeback a Node.js-style callback\n * @returns either the promise or nothing\n */\nQ.nodeify = nodeify;\nfunction nodeify(object, nodeback) {\n    return Q(object).nodeify(nodeback);\n}\n\nPromise.prototype.nodeify = function (nodeback) {\n    if (nodeback) {\n        this.then(function (value) {\n            nextTick(function () {\n                nodeback(null, value);\n            });\n        }, function (error) {\n            nextTick(function () {\n                nodeback(error);\n            });\n        });\n    } else {\n        return this;\n    }\n};\n\n// All code before this point will be filtered from stack traces.\nvar qEndingLine = captureLine();\n\nreturn Q;\n\n});\n",
    "\n/**\n* Entry point for the client side multi library for developing\n* multiscreen games.\n* @module client/multi\n* @example\n* // configure where multi can find your client side socket.io lib\nrequirejs.config({\n  paths: {\n    'socket.io': '/socket.io/socket.io.js'\n  }\n});\n\nvar multiOptions = {\n  server: 'http://mySocketioServer/'\n};\n\n// init and try to create the session\nvar multi = multiModule.init(multiOptions);\nmulti.createSession().then(onSession, onSessionFailed).done();\n*/\n\n\n\ndefine('multi',['require','exports','module','events','util','./session','../shared/color','../shared/errors','../lib/q','socket.io'],function(require, exports, module) {\n\n\tvar EventEmitter = require('events').EventEmitter;\n\tvar util = require('util');\n\tvar sessionModule = require('./session');\n\tvar color = require('../shared/color');\n\tvar errors = require('../shared/errors');\n\tvar Q = require('../lib/q');\n\tvar io = require('socket.io');\n\n\tQ.stopUnhandledRejectionTracking();\n\n\tvar instance = null;\n\n\n\t/**\n\t* @typedef {Object} module:client/multi~MultiOptions\n\t* @property                   server    full url of a running socket.io server\n\t* @property {SessionOptions}  [session] default options for session creation\n\t*/\n\n\t/**\n\t * @typedef {(string|Array.<string>|module:client/player~Player)} module:client/multi~toClient\n\t * @description  Option to determine to which client a message should be send\n\t * (not to which _instance_ on this client).<br>\n\t * You can set it to:\n\t * <ul>\n\t * <li>'all' - the message will be send to all clients currently connected to\n\t * this session</li>\n\t * <li>'all-but-myself' - the message will be send to all clients currently \n\t * connected to this session except the sending client </li>\n\t * <li>'server' - the message will be send to the game server only</li>\n\t * <li>[player1, player2] - message will be send to all clients that are\n\t * represented by players inside this array</li>\n\t * <li>myPlayer - the message will be send to the client that is represented\n\t * by myPlayer</li>\n\t * </ul>\n\t */\n\n\t/**\n\t * A promise object provided by the q promise library.\n\t * @external Promise\n\t * @see {@link https://github.com/kriskowal/q/wiki/API-Reference}\n\t */\n\n\n\t/**\n\t* @classdesc Use this class to create new sessions or connect to \n\t* existing ones. You can get ready a to use instance of this class\n\t* by initializing the multi framework with \n\t* {@link module:client/multi.init multiModule.init(options)}.\n\t* @inner\n\t* @protected\n\t* @memberof module:client/multi\n\t* @class\n\t* @param {module:client/multi~MultiOptions} options to tweak this instances behaviour  \n\t*/\n\tvar Multi = function (options) {\n\t\tthis.server = options.server;\n\t\tthis.sessionOptions = options.session;\n\t};\n\n\tfunction getSessionToken() {\n\t\tvar sessionToken = window.location.hash.substring(1);\n\n\t\tif (sessionToken === undefined || sessionToken === '') {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn sessionToken;\n\t\t}\n\t}\n\n\t/**\n\t * Tries to connect to a session that does already exist on the server. \n\t * The session token will be extracted from the URL by using characters \n\t * after the url hash.<br>\n\t * As this operation is executed asynchrony a Q promise will be returned.\n\t *\n\t * @return {external:Promise} On success the promise will be resolved with \n\t * the joined {@link module:client/session~Session Session} instance.<br><br>\n\t * On error it will be rejected with either \n\t * {@link module:shared/errors.NoSuchSessionError NoSuchSessionError}, \n\t * {@link module:shared/errors.SessionFullError SessionFullError}, \n\t * {@link module:shared/errors.JoiningDisabledError JoiningDisabledError}, \n\t * {@link module:shared/errors.NoSessionTokenFoundError NoSessionTokenFoundError}, \n\t * or {@link module:shared/errors.NoConnectionError NoConnectionError}.\n\t */\n\tMulti.prototype.autoJoinSession = function () {\n\t\tvar sessionToken = getSessionToken();\n\t\tif (sessionToken === null) {\n\t\t\tvar deferred = Q.defer();\n\t\t\tvar error = new errors.NoSessionTokenFoundError();\n\t\t\tdeferred.reject(error);\n\t\t\treturn deferred.promise;\n\t\t} else {\n\t\t\treturn this.joinSession(sessionToken);\n\t\t}\n\t};\n\n\t/**\n\t * Tries to auto join an existing session.\n\t * When no valid session token can be extracted from the URL a\n\t * new session will be created instead.<br>\n\t * As this operation is executed asynchrony a Q promise will be returned.\n\t *\n\t * @return {external:Promise} On success the promise will be resolved with \n\t * the created or joined {@link module:client/session~Session Session} \n\t * instance.<br><br>\n\t * On error it will be rejected with either \n\t * {@link module:shared/errors.NoSuchSessionError NoSuchSessionError}, \n\t * {@link module:shared/errors.SessionFullError SessionFullError}, \n\t * {@link module:shared/errors.TokenAlreadyExistsError TokenAlreadyExistsError}, \n\t * {@link module:shared/errors.JoiningDisabledError JoiningDisabledError}, \n\t * or {@link module:shared/errors.NoConnectionError NoConnectionError}.\n\t */\n\tMulti.prototype.autoJoinElseCreateSession = function () {\n\t\tvar that = this;\n\t\tvar deferred = Q.defer();\n\n\t\t// TODO: this does work but it stinks!\n\t\t// ask someone how to actually code this in a clean way\n\t\tthis.autoJoinSession().then(\n\t\t\tfunction (session) {\n\t\t\t\tdeferred.resolve(session);\n\t\t\t},\n\t\t\tfunction (error) {\n\t\t\t\tif (error instanceof errors.NoSessionTokenFoundError) {\n\t\t\t\t\tthat.createSession().then(\n\t\t\t\t\t\tfunction (session) {\n\t\t\t\t\t\t\tdeferred.resolve(session);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tfunction (error) {\n\t\t\t\t\t\t\tdeferred.reject(error);\n\t\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.reject(error);\n\t\t\t\t}\n\t\t\t});\n\t\treturn deferred.promise;\n\t};\n\n\t/**\n\t * Tries to connect to a session that does already exist on the server. \n\t * As this operation is executed asynchrony a Q promise will be returned.\n\t * @param {string} sessionToken  unique token of the session you want\n\t * to join\n\t * @return {external:Promise} On success the promise will be resolved with \n\t * the joined {@link module:client/session~Session Session} instance.<br><br>\n\t * On error it will be rejected with either \n\t * {@link module:shared/errors.NoSuchSessionError NoSuchSessionError}, \n\t * {@link module:shared/errors.SessionFullError SessionFullError}, \n\t * {@link module:shared/errors.JoiningDisabledError JoiningDisabledError},\n\t * or {@link module:shared/errors.NoConnectionError NoConnectionError}.\n\t *\n\t * @example\n\t * var multiOptions = {\n\t *  server: 'http://mySocketioServer/'\n\t * };\n\t *\n\t * function onSession(session) {\n\t *  console.log('session joined', session.token);\n\t * }\n\t * function onSessionFailed(error) {\n\t *  console.log('session joining failed:', error.message);\n\t * }\n\t *\n\t * // init and join the session\n\t * var multi = multiModule.init(multiOptions);\n\t * multi.joinSession('123').then(onSession, onSessionFailed).done();\n\t */\n\tMulti.prototype.joinSession = function (sessionToken) {\n\t\tvar multi = this;\n\t\tvar deferred = Q.defer();\n\t\tvar socket = io.connect(this.server, {\n\t\t\t\t'force new connection': true\n\t\t\t});\n\t\tsocket.on('connect', function () {\n\t\t\tsocket.emit('joinSession', {\n\t\t\t\ttoken: sessionToken,\n\t\t\t\tplayerParams: multi.getPlayerParams()\n\t\t\t});\n\t\t\tsocket.on('sessionJoined', function (data) {\n\t\t\t\tvar session = sessionModule.fromPackedData(data, socket);\n\t\t\t\tdeferred.resolve(session);\n\t\t\t});\n\t\t});\n\t\tsocket.on('connect_failed', function () {\n\t\t\tdeferred.reject(new errors.NoConnectionError());\n\t\t});\n\t\tsocket.on('joinSessionFailed', function (data) {\n\t\t\tvar error;\n\t\t\tif (data.reason === 'sessionNotFound') {\n\t\t\t\terror = new errors.NoSuchSessionError();\n\t\t\t} else if (data.reason === 'sessionFull') {\n\t\t\t\terror = new errors.SessionFullError();\n\t\t\t} else if (data.reason === 'joiningDisabled') {\n\t\t\t\terror = new errors.JoiningDisabledError();\n\t\t\t}\n\t\t\tdeferred.reject(error);\n\t\t});\n\t\treturn deferred.promise;\n\t};\n\n\t/**\n\t * Tries to create a new game session on the server. As this\n\t * operation is executed asynchrony a Q promise will be returned.\n\t * @param {SessionOptions} [options]  To tweak this new sessions behaviour.\n\t * If not provided, the session section of the multiOptions-object will\n\t * be used. If that does not exist either the default values will be used.\n\t *\n\t * @return {external:Promise} On success the promise will be resolved with the \n\t * created {@link module:client/session~Session Session} instance.<br><br>\n\t * On error it will be rejected with either \n\t * {@link module:shared/errors.TokenAlreadyExistsError TokenAlreadyExistsError},\n\t * or {@link module:shared/errors.NoConnectionError NoConnectionError}.\n\t *\n\t * @example\n\t * var multiOptions = {\n\t *  server: 'http://mySocketioServer/',\n\t *  session: {\n\t *    minPlayerNeeded: 3,\n\t *    maxPlayerAllowed: 5\n\t *  }\n\t * };\n\t *\n\t * function onSession(session) {\n\t *  console.log('session created', session.token);\n\t * }\n\t * function onSessionFailed(error) {\n\t *  console.log('session creation failed:', error.message);\n\t * }\n\t *\n\t * // init and try to create the session\n\t * var multi = multiModule.init(multiOptions);\n\t * multi.createSession().then(onSession, onSessionFailed).done();\n\t */\n\tMulti.prototype.createSession = function (options) {\n\t\toptions = options || this.sessionOptions;\n\n\t\tvar multi = this;\n\t\tvar deferred = Q.defer();\n\t\tvar socket = io.connect(this.server, {\n\t\t\t\t'force new connection': true\n\t\t\t});\n\t\tsocket.on('connect', function () {\n\t\t\tsocket.emit('createSession', {\n\t\t\t\toptions: options,\n\t\t\t\tplayerParams: multi.getPlayerParams()\n\t\t\t});\n\t\t\tsocket.on('sessionCreated', function (data) {\n\t\t\t\tvar session = sessionModule.fromPackedData(data, socket);\n\t\t\t\tdeferred.resolve(session);\n\t\t\t});\n\t\t});\n\t\tsocket.on('createSessionFailed', function (event) {\n\t\t\tif (event.reason === 'tokenAlreadyExists') {\n\t\t\t\tdeferred.reject(new errors.TokenAlreadyExistsError());\n\t\t\t}\n\t\t});\n\t\tsocket.on('connect_failed', function () {\n\t\t\tdeferred.reject(new errors.NoConnectionError());\n\t\t});\n\t\treturn deferred.promise;\n\t};\n\n\t/**\n\t * @returns {module:server/player~PlayerParams} an object containing\n\t * device information for this client\n\t * @private\n\t */\n\tMulti.prototype.getPlayerParams = function () {\n\t\treturn {\n\t\t\twidth: window.innerWidth,\n\t\t\theight: window.innerHeight\n\t\t};\n\t};\n\n\n\t/**\n\t * @public\n\t * @param {module:client/multi~MultiOptions} options to tweak this modules behaviour  \n\t * @returns {module:client/multi~Multi} the one and only Multi instance\n\t */\n\texports.init = function (options) {\n\t\tif (instance === null) {\n\t\t\tinstance = new Multi(options);\n\t\t\treturn instance;\n\t\t} else {\n\t\t\tthrow 'only one call to init allowed';\n\t\t}\n\t};\n\n\n\t/**\n\t * @type module:shared/errors.MultiError\n\t */\n\texports.MultiError = errors.MultiError;\n\n\t/**\n\t * @type module:shared/errors.NoSuchSessionError\n\t */\n\texports.NoSuchSessionError = errors.NoSuchSessionError;\n\n\t/**\n\t * @type module:shared/errors.TokenAlreadyExistsError\n\t */\n\texports.TokenAlreadyExistsError = errors.TokenAlreadyExistsError;\n\n\t/**\n\t * @type module:shared/errors.SessionFullError\n\t */\n\texports.SessionFullError = errors.SessionFullError;\n\n\t/**\n\t * @type module:shared/errors.NoConnectionError\n\t */\n\texports.NoConnectionError = errors.NoConnectionError;\n\n\t/**\n\t * @type module:shared/errors.NoSessionTokenFoundError\n\t */\n\texports.NoSessionTokenFoundError = errors.NoSessionTokenFoundError;\n\n\t/**\n\t * @type module:shared/errors.JoiningDisabledError\n\t */\n\texports.JoiningDisabledError = errors.JoiningDisabledError;\n\n\t/**\n\t * @type module:client/events.EventEmitter\n\t */\n\texports.EventEmitter = EventEmitter;\n\n\t/**\n\t * @type module:client/util\n\t */\n\texports.util = util;\n\n\t/**\n\t * @type module:shared/color\n\t */\n\texports.color = color;\n\n});\n"
  ]
}